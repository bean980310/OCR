--- Page 1 ---
arXiv:2305.02412v2 [cs.CL] 7 May 2023

Plan, Eliminate, and Track —
Language Models are Good Teachers for Embodied Agents.

Yue Wu! So Yeon Min! Yonatan Bisk!

Ruslan Salakhutdinov !

Amos Azaria? Yuanzhi Li!

Tom M. Mitchell! Shrimai Prabhumoye‘*

Abstract

Pre-trained large language models (LLMs)
capture procedural knowledge about the
world. Recent work has leveraged LLM’s abil-
ity to generate abstract plans to simplify chal-
lenging control tasks, either by action scoring,
or action modeling (fine-tuning). However,
he transformer architecture inherits several
constraints that make it difficult for the LLM
o directly serve as the agent: e.g. limited in-
ut lengths, fine-tuning inefficiency, bias from
pre-training, and incompatibility with non-
ext environments. To maintain compatibility
with a low-level trainable actor, we propose to
instead use the knowledge in LLMs to simplify
he control problem, rather than solving it.

We propose the Plan, Eliminate, and Track
PET) framework. The Plan module trans-
ates a task description into a list of high-level
sub-tasks. The Eliminate module masks out
irrelevant objects and receptacles from the ob-
servation for the current sub-task. Finally, the
Track module determines whether the agent
has accomplished each sub-task. On the Alf
World instruction following benchmark, the
PET framework leads to a significant 15%
improvement over SOTA for generalization to
human goal specifications.

1. Introduction

Humans can abstractly plan their everyday tasks with-
out execution; for example, given the task “Make break-
fast”, we can roughly plan to first pick up a mug and
make coffee, before grabbing eggs to scramble. Embod-
ied agents, endowed with this capability will generalize
more effectively by leveraging common-sense reasoning.

‘Carnegie Mellon University ?Ariel University *Microsoft

Research “Nvidia Research. Correspondence to: Yue Wu
<ywu5@andrew.cmu.edu>.

( Heat some apple and put it in the fridge }

Eliminate

Take an apple You see apple,
Paug-knife

—
Action: Pickup Apple

Update
Progress

Finished taking |
an apple? J

Figure 1. PET framework. Plan module uses LLM to gen-
erate a high-level plan. Eliminate Module uses a QA model
to mask irrelevant objects in observation. Track module
uses a QA model to track the completion of sub-tasks.

Recent work (Huang et al., 2022a;b; Ahn et al., 2022;
Yao et al., 2020) has used LLMs (Bommasani et al.,
2021) for abstract planning for embodied or gaming
agents. These have shown incipient success in extract-
ing procedural world knowledge from LLMs in linguistic
orm with posthoc alignment to executable actions in
he environment. However, they treat LLMs as the ac-
or, and focus on adapting LLM outputs to executable
actions either through fine-tuning (Micheli & Fleuret,
2021) or constraints (Ahn et al., 2022). Using LLM
as the actor works for pure-text environments with
imited interactions (Huang et al., 2022b; Ahn et al.,
2022) (just consisting of “picking/placing” objects), but
imits generalization to other modalities. In addition,
he scenarios considered have been largely simplified
from the real world. Ahn et al. (2022) provides all avail-
able objects and possible interactions at the start and
imits tasks to the set of provided objects/interactions.
Huang et al. (2022b) limits the environment to objects
on a single table.

On the other hand, to successfully “cut some lettuce”
in a real-world room, one has to “find a knife”, which
can be non-trivial since there can be multiple drawers
or cabinets (Chaplot et al., 2020; Min et al., 2021;
Blukis et al., 2021). A more realistic scenario leads to a


--- Page 2 ---
Plan, Eliminate, and Track

diverse, complicated set of tasks or large and changing
action space. Furthermore, the text description of the
observation increases as a function of the number o
receptacles and objects the agent sees. Combined with
growing roll-outs, the state becomes too verbose to fi
into any LLM.

In this work, we explore alternative mechanisms to
leverage the prior knowledge encoded in LLMs withow
impacting the trainable nature of the actor. We propose
a 3-step framework (Figure 1): Plan, Eliminate, an
Track (PET). Plan module simplifies complex tasks
by breaking them down into sub-tasks. It uses a pre-
trained LLM to generate a list of sub-tasks for an inpu
task description employing example prompts from the
training set similar to Huang et al. (2022a); Ahn et al.
(2022). The Eliminate module addresses the challenge
of long observations. It uses a zero-shot QA language
model to score and mask objects and receptacles that
are irrelevant to the current sub-task. The Track mod-
ule uses a zero-shot QA language model to determine
if the current sub-task is complete and moves to the
next sub-task. Finally, the Action Attention agen
uses a transformer-based architecture to accommodate
for long roll-out and variable length action space. The
agent observes the masked observation and takes an
action conditioned on the current sub-task.

We focus on instruction following in indoor households
on the AlfWorld (Shridhar et al., 2020b) interactive text
environment benchmark. Our experiments and analysis
demonstrate that LLMs not only remove 40% of task-
irrelevant objects in observation through common-sense
QA, but also generate high-level sub-tasks with 99%
accuracy. In addition, multiple LLMs may be used in
coordination with each other to assist the agent from
different aspects.

Our contributions are as follows:

1. PET: A novel framework for leveraging pre-
trained LLMs with embodied agents; our work
shows that each of P, E, T serves a complementary
role and should be simultaneously addressed to
tackle control tasks.

2. An Action Attention agent that handles the chang-
ing action space for text environments.

3. A 15% improvement over SOTA for generalization
to human goals via sub-task planning and tracking.

2. Related Work

Language Conditioned Policies A considerable
portion of prior work studies imitation learning (Tellex
et al., 2011; Mei et al., 2016; Nair et al., 2022; Stepput-
tis et al., 2020; Jang et al., 2022; Shridhar et al., 2022;

Sharma et al., 2021) or reinforcement learning (Misra.
et al., 2017; Jiang et al., 2019; Cideron et al., 2020;
Goyal et al., 2021; Nair et al., 2022; Akakzia et al.,
2020) policies conditioned on natural language instruc-
tion or goal (MacMahon et al., 2006; Kollar et al.,
2010). While some prior research has used pre-trained
language embeddings to improve generalization to new
instructions (Nair et al., 2022), they lack domain knowl-
edge that is captured in LLMs. Our PET framework
enables planning, progress tracking, and observation
filtering through the use of LLMs, and is designed to
be compatible with any language conditional policies
above.

LLMs for Control LLMs have recently achieved
success in high-level planning. Huang et al. (2022a)
shows that pre-trained LLMs can generate plausible
plans for day-to-day tasks, but the generated sub-tasks
cannot be directly executed in an end-to-end control
environment. Ahn et al. (2022) solves the executability
issue by training an action scoring model to re-weigh
LLM action choices and demonstrates success on a
robot. However, LLM scores work for simple environ-
ments with actions limited to pick/place (Ahn et al.,
2022), but fails with environments with more objects
and diverse actions (Shridhar et al., 2020b). Song
et al. (2022) uses GPT3 to generate step-by-step low-
level commands, which are then executed by respective
control policies. the work improves Ahn et al. (2022)
with more action diversity and on-the-fly re-plan. In
addition, all the above LLMs require few-shot demon-
strations of up to 17 examples, making the length of
the prompt infeasible for AlfWorld. Micheli & Fleuret
(2021) fine-tuned a GPT2-medium model on expert
trajectories in AlfWorld and demonstrated impressive
evaluation results. However, LM fine-tuning requires
a fully text-based environment, consistent expert tra-
jectories, and a fully text-based action space. Such
requirements greatly limit the generalization to other
domains, and even to other forms of task specification.
We show that our PET framework achieves better gener-
alization to human goal specifications which the agents
were not trained on.

Hierarchical Planning with Natural Language
Due to the structured nature of natural language, An-
dreas et al. (2017) explored associating each task de-
scription to a modular sub-policy. Later works extend
the above approach by using a single conditional policy
(Mei et al., 2016), or by matching sub-tasks to tem-
plates (Oh et al., 2017). Recent works have shown that
LLMs are proficient high-level planners (Huang et al.,
2022a; Ahn et al., 2022; Lin et al., 2022), and therefore
motivates us to revisit the idea of hierarchical task plan-


--- Page 3 ---
Plan, Eliminate, and Track

ning with progress tracking. To our knowledge, PET
is the first work combining a zero-shot subtask-level
LLM planner and zero-shot LLM progress tracker with
a low-level conditional sub-task policy.

Text Games _ Text-based games are complex, interac-
tive simulations where the game state and action space
are in natural lanugage. They are fertile ground for
language-focused machine learning research. In addi-
tion to language understanding, successful play requires
skills like memory and planning, exploration (trial and
error), and common sense. The AlfWorld (Shridhar
et al., 2020b) simulator extends a common text-based
game simulator, TextWorld Coté et al. (2018a), to
create text-based analogs of each ALFRED scene.

Agents for Large Action Space He et al. (2015)
learns representation for state and actions with two
different models and computes the Q function as the
inner product of the representations. While this could
generalize to large action space, they only considered
a small number of actions.

Fulda et al. (2017); Ahn et al. (2022) explore action
elimination in the setting of affordances. Zahavy et al.
(2018) trains a model to eliminate invalid actions on
Zork from external environment signals. However, the
functionality depends on the existence of external elim-
ination signal.

3. Plan, Eliminate, and Track

In this section, we explain our 3-step framework: Plan,
Eliminate, and Track (PET). In Plan module (Mp),
a pre-trained LLM generates a list of sub-tasks for an
input task description using samples from the training
set as in-context examples. The Eliminate module
(Mg) uses a zero-shot QA language model to score an
mask objects and receptacles that are irrelevant to the
current sub-task. The Track module (Mr) uses a zero-
shot QA language model to determine if the current
sub-task is complete and moves to the next sub-task.
Note that Plan is a generative task and Eliminate an
Track are classification tasks.

We also implement an attention-based agent (Action
Attention), which scores each permissible action and is
trained on imitation learning on the expert. The agen
observes the masked observation and takes an action
conditioned on the current sub-task.

Problem Setting We define the task description as
T, the observation string at time step t as O', and
the list of permissible actions {a!|a can be executed}
as A’. For each observation string O', we define the

Examples from
Training set

Planning Module (

Target Output

Figure 2. Plan Module (Sub-task Generation). 5 full exam-
ples are chosen from the training set based on RoBERTa
embedding similarity with the task query description. Then
the examples are concatenated with the task query to get
the prompt. Finally, we prompt the LLM to generate the
desired sub-tasks.

receptacles and objects within the observation as rf and
o; respectively. The classification between receptacles
and objects is defined by the environment (Shridhar
et al., 2020b). For a task J, we assume there exists a
list of sub-tasks Sy = {s1,...s8,} that solves T.

3.1. Plan

Tasks in the real world are often complex and need
more than one step to be completed. Motivated by the
ability of humans to plan high-level sub-tasks given
a complex task, we design the Plan module (Mp)
to generate a list of high-level sub-tasks for a task
description T.

Inspired by the contextual prompting techniques for
planning with LLMs (Huang et al., 2022a), we use
an LLM as our plan module Mp. For a given task
description J, we compose the query question Q7 as
“What are the middle steps required to JT?” , and require
Mp to generate a list sub-tasks Sy = {51,... sx}.

Specifically, we select the top 5 example tasks 7” from
the training set based on RoBERTa (Liu et al., 2019)
embedding similarity with the query task 7. We then
concatenate the example tasks with example sub-tasks
in a query-answer format to build the prompt Pz for
Mp (Fig. 2):

Pr= concat(Qre, Srp, Ore, Spe, Or)

An illustration of our prompt format is shown in Fig-
ure 2, where T =“heat some apple and put it in fridge”,
and Q;» =“What are the middle steps required to put
two spraybottles on toilet”, Srp =“take a spraybottle,

--- Page 4 ---
Plan, Eliminate, and Track

place the spraybottle in/on toilet, take a spraybottle,

lace the spraybottle in/on toilet”. The expected list of
sub-tasks to achieve this task T is s; =‘take an apple’,
82 =‘heat the apple’, and s3 =‘place the apple in/on
ridge’

(You are in the middle of a room. Looking quickly around you, you see a
a cabinet 5, a cabinet 4, a cabinet 3, a cabinet 2, a cabinet 1, a
coffeemachine 1, a countertop 2, a countertop 1, a diningtable 1, a
drawer 5, a drawer 4, a drawer 3, a drawer 2, a drawer 1, a fridge 1, a
garbagecan 1, a sinkbasin 1, and a microwave 1. Your task is to heat

some apple and put it in the fridge. Where should you go?

You are in the middle of a room. Looking quickly around you, you see a
a cabinet 5, a cabinet 4, a cabinet 3, a cabinet 2, a cabinet 1, a

countertop 2, a countertop 1, a diningtable 1, a fridge 1, a garbagecan1.

Figure 3. Eliminate Module (Receptacle Masking). We
use a pre-trained QA model to filter irrelevant recepta-
cles/objects in the observation of each scene. As we can
see, the original observation is too long and the receptacles
shown in red are not relevant for task completion. These
receptacles are filtered by the QA model making the obser-
vation shorter.

3.2. Eliminate

Typical Alfworld scenes can start with around 15 re-
ceptacles, each containing up to 15 objects. In some
close-to-worst cases, there can be around 30 open-able
receptacles (e.g. a kitchen with many cabinets and
drawers), and it easily takes an agent with no prior
knowledge more than 50 steps for the agent to find the
desired object (repeating the process of visiting each
receptacle, opening it, closing it). We observe that
many receptacles and objects are irrelevant to specific
asks during both training and evaluation, and can

e easily filtered with common-sense knowledge about
he tasks. For example, in Fig. 3 the task is to heat

some apple. By removing the irrelevant receptacles like
he coffeemachine, garbagecan, or objects like knife,
we could significantly shorten our observation. We
herefore propose to leverage commonsense knowledge
captured by large pre-trained QA models to design our
Eliminate module Mg to mask out irrelevant recepta-
cles and objects.

For task 7, we create prompts in the format P, =“Your
ask is to: T. Where should you go to?” for receptacles
and P, =“Your task is to: T. Which objects will be
relevant?” for objects. Using the pre-trained QA model
Meg in a zero-shot manner, we compute score flo, =
Mag(P.,0:) for each object 0; and pr, = Mg(Po, ri)
for each receptacle r; in observation at every step. 1
represents the belief score of whether the common-sense
QA model believes the object /receptacle is relevant to

T. We then remove 0; from observation if fio, < To,
and remove 1; if jp, < 7,. Threshold 7,,7, are hyper-
parameters.

Environment

You are in the middle of a room. Looking quickly around you, you see ..., a
garbagecan 1, a sinkbasin 1, and a toaster 1.

> go to sinkbasin 1
On the sinkbasin 1, you see nothing.

> go to diningtable 1
On the diningtable 1, you see a apple 1, a bread 3, a cup 3, and a peppershaker 2.
You take apple 1 from diningtable 1.

Subtasks

Take an apple
Heat the apple +
Place the apple in/ on fridge

Context

On the diningtable 1, you see a apple 1, a
bread 3, ..... You take apple 1 from
diningtable 1.

Did you finish the task of take an apple ?

Tracking Module (

Update
progress
tracker

Figure 4. Track Module (Progress Tracking). At every step,
we take the last 3 steps of roll-out as context and append a
query (about whether the current sub-task is completed)
to get the prompt. A pre-trained QA model generates a
Yes/No answer to the prompt. For the answer “Yes”, we
update the tracker to the next sub-task.

3.3. Track

For the agent to utilize the high-level plan, it first needs
to know which sub-task to execute. A human actor
typically starts from the first item and check-off the
tasks one by one until completion. Therefore, similar
to Section 3.2, we use a pre-trained QA model to design
the Track module Mr to perform zero-shot sub-task
completion detection.!

Specifically, as illustrated in Figure 4, for sub-task list
Sr = {s1,... 8x}, we keep track of a progress tracker p
(initialized at 1) that indicates the sub-task the agent
is currently working on (sp). We then compose the
context as the last d steps of the agent observation

1Note that the current system design does not allow
re-visiting finished sub-tasks, so the agent has no means to
recover if it undoes its previous sub-task at test time.

--- Page 5 ---
Plan, Eliminate, and Track

for the current sub-task and the question as “Did you
finish the task of s,?”. For efficiency, we set d :=
min(d + 1,3) at each step. Note that d is reset to
whenever the progress tracker updates. Hence, the
emplate P, = concat(O'4,..., 01, “Did you finish
he task of s,?”). We feed P, to a pre-trained zero-
shot QA model M+ and compute the probability of
okens ‘Yes’ and ‘No’ as follows: paz, (“Yes”|Pa) and
Pag (*No"[Pa)- IE pate “Yes” [Pa) > pate (*No" [Pa)
hen we increment the tracker p to track the next sub-
ask.

f the tracking ends prematurely, meaning that p >
len(S7) but the environment has not returned “done”,
we fall back to conditioning with 7. We study the rate
of pre-mature ends in Section 4.4 in terms of precision
and recall.

3.4. Agent

Since the number of permissible actions can vary a
lot by the environment, the agent needs to handle
arbitrary dimensions of action space. While Shridhar
et al. (2020b) addresses this challenge by generating
actions token-by-token, such a generation process leads
o degenerate performance even on the training set.

We draw inspiration from the field of text summariza-
ion, where models are built to handle variable input
lengths. See et al. (2017) generates a summary through
an attention-like “pointing” mechanism that extracts
he output word by word. Similarly, an attention-like
“pointing” model could be used to select an action from
he list of permissible actions.

Action Attention We are interested in learning a
policy 7 that outputs the optimal action among per-
missible actions. We eschew the long rollout/ large
action space problems by (1) representing observations
y averaging over history, and (2) individually encod-
ing actions (Fig 5). In our proposed action attention
ramework, we first represent historical observations
H' as the average of embeddings of all individual ob-
servations through history (Eq. 1), and H@ as the list
of embeddings of all the current permissible actions
(Eq. 2). Then, in Eq. 3, we compute the query Q
using a transformer with a “query” head (Mg) on task
embedding (H"), the current observation embedding
(O*), and the list of action embeddings (H“). In Eq.
4 we compute the key K; for each action a; using the
same transformer with a “key” head (Mx) on task
embedding (H"), the current observation embedding
(O'), and embedding of action (a;).

Finally, we compute the dot-product of the query and

keys as action scores for the policy 7 (Eq. 5).

H'= avg jc[1,t-1]Embed(O’) (
H4 = [Embed(a‘), ..., Embed(a',)] (
Q = Mo (Embed(T), H', Embed(0'), H“) (2
K; = Mx (Embed(7), H‘, Embed(0'), Embed(a})

m@ = softmax ([Q - K;|é € all permissible actions])

4. Experiments and Results

We present our experiments as follows. First, we ex-
plain the environment setup and baselines for our ex-
periments. Then we compare PET to the baselines on
different splits of the environment. Finally, we conduct
ablation studies and analyze the PET framework part
by part. We show that PET generalizes better to hu-
man goal specification under efficient behavior cloning
training.

4.1. Experimental Details

AlfWorld Environment ALFWorld (Shridhar
et al., 2020b) is a set of TextWorld environments
(Coté et al., 2018b) that are parallels of the ALFRED
embodied dataset (Shridhar et al., 2020a). ALFWorld
includes 6 task types that each require solving multiple
compositional sub-goals. There are 3553 training task
instances ({tasktype, object, receptacle, room}), 140
in-distribution evaluation task instances (seen split -
tasks themselves are novel but take place in rooms seen
during training) and 134 out-of-distribution evaluation
task instances (unseen split - tasks take place in novels

rooms). An example of the task could be: “Rinse the
egg to put it in the microwave.” Each training instance
in AlfWorld comes with an expert, from which we
collected our training demonstration.

Human Goal Specification The crowd-sourced hu-
man goal specifications for evaluation contain 66 unseen
verbs and 189 unseen nouns (Shridhar et al., 2020b).
In comparison, the template goals use only 12 ways of
goal specification. In addition, the sentence structure
for human goal specification is more diverse compared
to the template goals. Therefore, human goal experi-
ments are good for testing the generalization of models
to out-of-distribution scenarios.

Pre-trained LMs. For the Plan module (sub-task
generation), we experimented with the open-source
GPT-Neo-2.7B (Black et al., 2021), and an industry-
scale LLM with 530B parameters (Smith et al., 2022).

--- Page 6 ---
Plan, Eliminate, and Track

1 3
oO (a) ot at al, ay
You are in the middle You go to diningtable You go to microwave =
of a room. Looking 1. In diningtable 1, 1. You open Goto Examine Heat
quickly around, you you see a apple 1, a microwave 1. ... cabinet 1 cabinet 1 apple 1
see a cabinet 5, a mug 3, a cup 3. You
cabinet 4, ... take apple 1 from |
diningtable 1.
Heat the et x v
-
T J Za J
GSC K, Ks
N _

Action Attenti Heat apple 1

i

Figure 5. Agent (Action Attention). Action Attention block is a transformer-based framework that computes a key K; for
each permissible action and output action scores as dot-product between key and query Q from the observations.

Template Goal Specification

Model seen unseen seen unseen
BUTLER + DAgger* (Shridhar et al., 2020b) 40 35 8 3
BUTLER + BC (Shridhar et al., 2020b) 10 9 - -
GPT (Micheli & Fleuret, 2021) 91 95 42 57
PET + Action Attention (Ours) 70 67.5 52.5 60

Table 1. Comparison of different models in terms of completion rate per evaluation split (seen and unseen), with and
without human annotated goals. PET under-performs GPT on Template goal specifications but generalizes better to

For the Eliminate module (receptacle/object mask-
ing), we choose Macaw-11b (Tafjord & Clark, 2021),
which is reported to have common sense QA perfor-
mance on par with GPT3 (Brown et al., 2020) while
eing orders of magnitudes smaller. We use a decision
hreshold of 0.4 for Macaw score below which the ob-
jects are masked out. For the Track module (progress
racking), we use the same Macaw-11b model as the
Eliminate module answer to Yes/No questions.

Actor Model Design. Our Action Attention
agent (Mg and Mx) is a 12-layer transformer with
2 heads and hidden dimension 384. The last layer
is then fed into two linear heads to generate K and
Q. For embedding of actions and observations, we use
re-trained RoBERTa-large (Liu et al., 2019) with em-
edding dimension 1024. For sub-task generation, we
use ground-truth sub-tasks for training, and generated
sub-tasks from Plan module for evaluation.

Experimental Setup. Unlike the original bench-
mark (Shridhar et al., 2020b), we experiment with
models trained with behavior cloning. Although Shrid-
har et al. (2020b) observe that models benefit greatly
from DAgger training, DAgger assumes an expert that
is well-defined at all possible states, which is inefficient
and impractical. In our experiments, training is 100x
slower with DAgger compared to behavior cloning (3

human goal specifications. * We include the performance of BUTLER with DAgger for completeness. All other rows are
trained without interaction with the environment, MLE for GPT and behavior cloning for BUTLER+BC and PET.

weeks for DAgger v.s. 6 hours for Behavior Cloning). In
addition, we demonstrate that our models surpass the
DAgger training performance of the BUTLER (Shrid-
har et al., 2020b) agents trained with DAgger, even
when our agent does not have the option to interact
with the environment.

Baselines. Our first baseline is the BUT-
LER::BRAIN (BUTLER) agent (Shridhar et al.,
2020b), which consists of an encoder, an aggregator,
and a decoder. At each time step t, the encoder
takes initial observation s°, current observation s‘,
and task string Stas, and generates representation
r'. The recurrent aggregator combines r’ with the
last recurrent state h'~! to produce h’, which is
then decoded into a string a’ representing action. In
addition, the BUTLER agent uses beam search to get
out of stuck conditions in the event of a failed action.
Our second baseline GPT (Micheli & Fleuret, 2021)
is a fine-tuned GPT2-medium on 3553 demonstrations
from the AlfWorld training set. Specifically, the
GPT is fined-tuned to generate each action step
word-by-word to mimic the rule-based expert using
the standard maximum likelihood loss.

Human Goal Specification

--- Page 7 ---
Plan, Eliminate, and Track

4.2. Overall Results on Template and Human
Goals

We compare the performance of action attention as-
sisted by PET with BUTLER (Shridhar et al., 2020b)
and fine-tuned GPT (Micheli & Fleuret, 2021) in Ta-
ble 1. For human goal specifications, PET outperforms
SOTA (GPT) by 25% on seen and 5% on the unseen
split.

Although PET under-performs GPT on Template goal
specifications, GPT requires fine-tuning on fully text-
based expert trajectory and thus loses adaptability to
different environment settings. Qualitatively, on human
goal specification tasks, where the goal specifications
are out-of-distribution, GPT often gets stuck repeating
the same action after producing a single wrong move.
On the other hand, since the Plan module of PET is
not trained on the task, it generalizes to the variations
for human goal specifications as shown in Section 4.5.
Quantitatively, GPT suffers from a relative 50% perfor-
mance drop transferring from template to human-goal
specifications, whereas PET incurs only a 15 ~ 25%
drop.

The setting closest to PET is BUTLER with behavior
cloning (BUTLER + BC). Since BUTLER + BC per-
‘orms poorly, we also include DAgger training results.
Nevertheless, action attention assisted by PET outper-
orms BUTLER with DAgger by more than 2x while
eing much more efficient. (Section 4.1)

4.3. Ablations for Plan, Eliminate, and Track

n Table 3, we analyze the contribution of each PET
module by sequentially adding each component to the
action attention agent on 140 training trajectories sam-
led from the training set. The data set size is chosen
© match the size of the seen validation set, for an
efficient and sparse setting. Note that we treat Plan
and Track as a single module for this ablation since
hey cannot work separately.

Adding Plan and Track greatly improves the comple-
ion rate relatively by 60%, which provides evidence to
our hypothesis that solving some embodied tasks step-
y-step reduces the complexity. We observe a relatively

insignificant 3% improvement in absolute performance
when adding Eliminate without sub-task tracking. On
he other hand, when applying Eliminate to sub-tasks
with Plan and Track, we observe more than 60% rela-
ive improvement over just Plan and Track alone. We,
herefore, deduce that Plan and Track boost the perfor-
mance of Eliminate during evaluation, since it is easier
0 remove irrelevant objects when the objective is more
on sub-tasks.

focuset

4.4. Automated Analysis of PET modules

Plan Module We experiment with different LLMs
such as GPT2-XL (Radford et al., 2019), GPT-Neo-
2.7B (Black et al., 2021), and the 530B parameter
MT-NLG (Smith et al., 2022) models. Table 2 reports
the generation accuracy and the RoBERTa (Liu et al.,
2019) embedding cosine similarity against ground-truth
sub-tasks. We observe that all LLMs achieve high
accuracy on template goal specifications, where there
is no variation in sentence structures. For human goal
specification, MT-NLG generates subtasks similar to
ground truth in terms of embedding similarity, while
he other smaller models perform significantly worse.

Eliminate module We evaluate the zero-shot recep-
acle/object masking performance of Macaw on the
hree splits of AlfWorld. In Fig 6, we illustrate the
AUC curve of the relevance score that the model assigns
‘0 the objects v.s. objects that the rule-based exper
interacted with when completing each task. Since the
Macaw QA model is queried in a zero-shot manner, i
demonstrates consistent masking performance on al
hree splits of the environment, even on the unseen
lit. In addition, we note that object receptacle accu-
acy is generally lower than object accuracy because o
he counter-intuitive spawning locations described in
Section 4.5. In our experiments, a decision threshol
0.

(o)

ow

0.4 has a recall of 0.91 and reduces the number o:
bjects in observation by 40% on average.

Track module Since sub-task alignment information
is not provided by the environment, we explore an
alternative performance metric for the detection of the
event of completion. Ideally, a sub-task tracker shoul
record the last sub-task as shed” if and only if the
environment is “fully solved” by the expert. As an
agreement measure, we report a precision of 0.99 an
a recall of 0.78 for Macaw-11B and a precision of 0.96
and a recall of 0.96 for Macaw-large. The larger mode
(Macaw-11b) is more precise but misses more detection,
therefore limiting the theoretical performance to 78%.
The smaller model is much less accurate according to

human evaluation but does not limit the overall model
performance in theory. In our experiments, we fin
that both models produce similar overall results, which
may suggest that the overall results could be improve
with LLMs doing better on both precision and recall.

4.5. Qualitative Analysis

Plan Module We show two types of failure exam-
ples for sub-task generation in Table 4. The first type
of error is caused by generating synonyms of the ground
truth, and the second type of error is caused by inaccu-

--- Page 8 ---
Plan, Eliminate, and Track

Template Goals

Human Goals

LLM seen unseen seen unseen
GPT-2 (Radford et al., 2019) 94.29 (0.97) 87.31 (0.94) 10.07 (0.62) 7.98 (0.58)
GPT-Neo-2.7B (Black et al., 2021) 99.29 (1.00) 96.27 (0.98) 4.70 (0.82) 9.16 (0.80)
MT-NLG (Smith et al., 2022) 98.57 (0.99) | 100 (1.00) 40.04 (0.94) 49.3 (0.94)

Table 2. Evaluation of different LLMs for Plan module in terms of accuracy and RoBERTa embedding cosine similarity
(in brackets) against ground-truth sub-tasks, per evaluation split (seen and unseen), with and without human annotated
goals. The MT-NLG with 530B parameters achieves the overall best performance on all dataset splits and greatly exceeds
the performance of smaller models on hard tasks with human goal specification. In addition, MT-NLG generates sub-tasks

with almost perfect embedding similarity for all tasks.
ROC curve for train receptacle identification

ROC curve for valid_seen receptacle identification

ROC curve for valid_unseen receptacle identification

10 10 10

08 08 08
206 = 06 = 06
Bas Bos Bas
& & &

02 oz 02

oo) — nuc=0.6362842168817953 oo} — ‘uc=0.6623760037789325 oo} 4 — Auc=0.6722986295967663

00 02 04 0608 10 00 02 oa 0608 10 00 02 oa os 08 10
False Positive Rate Falze Positive Rate False Positive Rate
ROC curve for train object identification ROC curve for valid_seen object identification ROC curve for valid_unseen object identification

10 10 10

o8 o8 o8
2 06 2 06 2 06
Box Box Eon
& & ©

oz oz oz

oo} be — nuc=0.7469037685050358 oo} be — wuc=o.7841203546425264 oo) — wuc=0.76064267786461

00 02 04 0608 10 00 02 oa 0608 10 00 02 oa 0608 10
False Positive Rate False Positive Rate False Positive Rete
Figure 6. Plot of AUC scores of zero-shot relevance identification across all tasks in the Alfworld-Thor environment,

with the Macaw-11b model. The ground truth is obtained as receptacles/objects accessed by the rule-based expert.
Top: Receptacle relevance identification. Bottom: Object relevance identification. The QA model achieves an average

AUC-ROC score of 65 for receptacles and 76 on objects.

incorrectly masks a receptacle that contains the object

Model Ablations seen unseen
Action Attention 25 9
Action Attention + Eliminate 25 11
Action Attention + Plan & Track 35 15
Action Attention + PET 52.5 27.5

Table 3. Comparison of different ablations of PET trained
on a sampled set of 140 demonstrations from the training
set, in terms of completion rate per evaluation split (seen
and unseen). Applying Eliminate module alone has an
insignificant effect on overall performance compared to
Plan & Track. However, applying Eliminate module on
sub-tasks together with Plan & Track results in a much
more significant performance improvement.

racies in the human goal specifications. Note that our
Action Attention framework uses RoBERTa (Liu et al.,
2019) embedding for sub-tasks, known to be robust to
synonym variations.

Eliminate Module We observe that the main
source of elimination error occurs when the module

of interest so the agent fails to find such receptacles.
This is often because some objects in the AI2Thor
simulator do not spawn according to common sense.
As noted in the documentation of the environment?,
objects like Apple or Egg has a chance of spawning in
unexpected receptacles like GarbageCan, or TVStand.
However, such generations in AI2Thor are unlikely in
real deployment; thus, the “mistakes” of our Eliminate
module are reasonable.

hat sub-
for tasks

Track Module Experimentally, we find
task planning/tracking is particularly helpful
that require counting procedures. As shown in Ta-
ble ??, PET breaks the task of “Place two soapbar
in cabinet” into two repeating set of sub-tasks: “take
soapbar—+place soapbar in/on cabinet”. Sub-task plan-
ning and tracking, therefore, simplify the hard problem
of counting.

? ai2thor.allenai.org/ithor/documentation/objects/object-
types/

--- Page 9 ---
Plan, Eliminate, and Track

Human Goal Specification Examples

Task Chill a cup and place it in the cabinet.

ar cool the mug—+place the mug in/on coffeema-
chine

Gen chill the mug—return the mug to coffeema-
chine

Task Take the pencil from the desk, put it on the

other side of the desk
GT take a pencil—+place the pencil in/on shelf
Gen

white pencil on another spot on the desk

Table 4. Failure examples from the Plan module on human
goal specifications (Task), ground-truth (GT) v.s. generated
(Gen). In the first example, generated plan differs from
the ground truth but the meaning agrees. In the second
example, the generated plan largely differs from the ground
truth due to the mistake in human goal specification —
“another side on the desk” instead of “shelf”.

5. Conclusion, Limitations, and Future
Work

n this work, we propose the Plan, Eliminate, and
Track (PET) framework that uses pre-trained LLMs
© assist an embodied agent in three steps. Our PET
framework requires no fine-tuning and is designed to be
compatible with any goal-conditional embodied agents.

n our experiments, we combine PET with a novel Ac-
ion Attention agent that handles the dynamic action
space in AlfWorld. Our Action Attention agent greatly
outperforms the BUTLER baseline. In addition, since
he PET framework is not trained to fit the training set
asks, it demonstrates better generalization to unseen
human goal specification tasks. Finally, our ablation
studies show the Plan and Track modules together im-
rove the performance of Eliminate module to achieve
he best performance.

Our results show that LLMs can be a good source of
common sense and procedural knowledge for embodied
agents, and multiple LLMs may be used in coordination
with each other to further improve effectiveness.

One of the major limitations of our current system
design is that the Track module (progress tracker) does
not re-visit finished sub-tasks. If for example, the agent
is executing sub-tasks [picked up a pan, put the pan on
countertop], and it picked up a pan but put it in the
fridge (undo pickup action). Since the progress tracker
does not take into consideration previous progress being
undone, the system may break in this situation. Future
work can focus on adding sub-task-level dynamic re-
planning to address this limitation or explore other
ways in which LLMs can assist the learning of the

pick up the white pencil on the desk—put the

policy (i.e., reading an instruction manual about the
environment).

References

Ahn, M., Brohan, A., Brown, N., Chebotar, Y., Cortes,
O., David, B., Finn, C., Fu, C., Gopalakrishnan, K.,
Hausman, K., Herzog, A., Ho, D., Hsu, J., Ibarz,
J., Ichter, B., Irpan, A., Jang, E., Ruano, R. J.,
Jeffrey, K., Jesmonth, S., Joshi, N. J., Julian, R.,
Kalashnikov, D., Kuang, Y., Lee, K.-H., Levine, S.,
Lu, Y., Luu, L., Parada, C., Pastor, P., Quiambao,
J., Rao, K., Rettinghouse, J., Reyes, D., Sermanet,
P., Sievers, N., Tan, C., Toshev, A., Vanhoucke, V.,
Xia, F., Xiao, T., Xu, P., Xu, S., Yan, M., and
Zeng, A. Do as i can, not as i say: Grounding
language in robotic affordances, 2022. URL https:
//arxiv.org/abs/2204.01691.

Akakzia, A., Colas, C., Oudeyer, P.-Y., Chetouani,
M., and Sigaud, O. Grounding language to
autonomously-acquired skills via goal generation.
arXiv preprint arXiv:2006.07185, 2020.

Andreas, J., Klein, D., and Levine, §. Modular multi-
task reinforcement learning with policy sketches. In
International Conference on Machine Learning, pp.
166-175. PMLR, 2017.

Black, S., Gao, L., Wang, P., Leahy, C., and Bider-
man, S. GPT-Neo: Large Scale Autoregressive Lan-
guage Modeling with Mesh-Tensorflow, March 2021.
URL https ://doi.org/10.5281/zenodo.5297715.
If you use this software, please cite it using these
metadata.

Blukis, V., Paxton, C., Fox, D., Garg, A., and Artzi, Y.
A persistent spatial semantic representation for high-
level natural language instruction execution, 2021.
URL https: //arxiv.org/abs/2107.05612.

Bommasani, R., Hudson, D. A., Adeli, E., Altman, R..,
Arora, S., von Arx, S., Bernstein, M. S., Bohg, J.,
Bosselut, A., Brunskill, E., Brynjolfsson, E., Buch,
S., Card, D., Castellon, R., Chatterji, N., Chen,
A., Creel, K., Davis, J. Q., Demszky, D., Don-
ahue, C., Doumbouya, M., Durmus, E., Ermon, S.,
Etchemendy, J., Ethayarajh, K., Fei-Fei, L., Finn,
C., Gale, T., Gillespie, L., Goel, K., Goodman, N.,
Grossman, S., Guha, N., Hashimoto, T., Hender-
son, P., Hewitt, J., Ho, D. E., Hong, J., Hsu, K.,
Huang, J., Icard, T., Jain, S., Jurafsky, D., Kalluri,
P., Karamcheti, S., Keeling, G., Khani, F., Khat-
tab, O., Koh, P. W., Krass, M., Krishna, R., Ku-
ditipudi, R., Kumar, A., Ladhak, F., Lee, M., Lee,
T., Leskovec, J., Levent, I., Li, X. L., Li, X., Ma,

--- Page 10 ---
Plan, Eliminate, and Track

T., Malik, A., Manning, C. D., Mirchandani, S.,
Mitchell, E., Munyikwa, Z., Nair, S., Narayan, A.,
Narayanan, D., Newman, B., Nie, A., Niebles, J. C.,
Nilforoshan, H., Nyarko, J., Ogut, G., Orr, L., Pa-
padimitriou, L, Park, J. S., Piech, C., Portelance,
E., Potts, C., Raghunathan, A., Reich, R., Ren,
H., Rong, F., Roohani, Y., Ruiz, C., Ryan, J., Ré,
C., Sadigh, D., Sagawa, S., Santhanam, K., Shih,
A., Srinivasan, K., Tamkin, A., Taori, R., Thomas,
A. W., Tramér, F., Wang, R. E., Wang, W., Wu,
B., Wu, J., Wu, Y., Xie, S. M., Yasunaga, M., You,
J., Zaharia, M., Zhang, M., Zhang, T., Zhang, X.,
Zhang, Y., Zheng, L., Zhou, K., and Liang, P. On
the opportunities and risks of foundation models,
2021. URL https: //arxiv.org/abs/2108.07258.

Brown, T., Mann, B., Ryder, N., Subbiah, M., Kaplan,
J. D., Dhariwal, P., Neelakantan, A., Shyam, P.,
Sastry, G., Askell, A., et al. Language models are
few-shot learners. Advances in neural information
processing systems, 33:1877-1901, 2020.

Chaplot, D. S., Gandhi, D., Gupta, A., and Salakhut-
dinov, R. Object goal navigation using goal-oriented
semantic exploration, 2020. URL https://arxiv.
org/abs/2007 .00643.

Cideron, G., Seurin, M., Strub, F., and Pietquin, O.
Higher: Improving instruction following with hind-
sight generation for experience replay. In 2020 IEEE
Symposium Series on Computational Intelligence
(SSCI), pp. 225-232. IEEE, 2020.

Coté, M.-A., Kadar, A., Yuan, X., Kybartas, B.,
Barnes, T., Fine, E., Moore, J., Hausknecht, M.,
Asri, L. E., Adada, M., et al. Textworld: A learning
environment for text-based games. In Workshop on
Computer Games, pp. 41-75. Springer, 2018a.

Coté, M.-A., Kadar, A., Yuan, X., Kybartas, B.,
Barnes, T., Fine, E., Moore, J., Hausknecht, M.,
Asri, L. E., Adada, M., et al. Textworld: A learning
environment for text-based games. In Workshop on
Computer Games, pp. 41-75. Springer, 2018b.

Fulda, N., Ricks, D., Murdoch, B., and Wingate,
D. What can you do with a rock? affordance
extraction via word embeddings. arXiv preprint
arXiv:1703.03429, 2017.

Goyal, P., Niekum, S., and Mooney, R. Pixl2r: Guiding
reinforcement learning using natural language by
mapping pixels to rewards. In Conference on Robot
Learning, pp. 485-497. PMLR, 2021.

He, J., Chen, J., He, X., Gao, J., Li, L., Deng, L.,
and Ostendorf, M. Deep reinforcement learning with

a natural language action space. arXiv preprint

arXiv:1511.04636, 2015.

Huang, W., Abbeel, P., Pathak, D., and Mordatch, I.
Language models as zero-shot planners: Extracting
actionable knowledge for embodied agents, 2022a.
URL https: //arxiv.org/abs/2201.07207.

Huang, W., Xia, F., Xiao, T., Chan, H., Liang, J.,
Florence, P., Zeng, A., Tompson, J., Mordatch, L.,
Chebotar, Y., Sermanet, P., Brown, N., Jackson,
T., Luu, L., Levine, S., Hausman, K., and Ichter,
B. Inner monologue: Embodied reasoning through
planning with language models, 2022b. URL https:
//arxiv.org/abs/2207 .05608.

Jang, E., Irpan, A., Khansari, M., Kappler, D., Ebert,
F., Lynch, C., Levine, S., and Finn, C. Be-z: Zero-
shot task generalization with robotic imitation learn-
ing. In Conference on Robot Learning, pp. 991-1002.
PMLIR, 2022.

Jiang, Y., Gu, S. S., Murphy, K. P., and Finn, C. Lan-
guage as an abstraction for hierarchical deep rein-
forcement learning. Advances in Neural Information
Processing Systems, 32, 2019.

Kollar, T., Tellex, S., Roy, D., and Roy, N. Toward
understanding natural language directions. In 2010
5th ACM/IEEE International Conference on Human-
Robot Interaction (HRI), pp. 259-266. IEEE, 2010.

Lin, B. Y., Huang, C., Liu, Q., Gu, W., Sommerer,
S., and Ren, X. On grounded planning for em-
bodied tasks with language models. arXiv preprint
arXiv:2209.00465, 2022.

Liu, Y., Ott, M., Goyal, N., Du, J., Joshi, M., Chen, D.,
Levy, O., Lewis, M., Zettlemoyer, L., and Stoyanov,
V. Roberta: A robustly optimized bert pretraining
approach. arXiv preprint arXiv:1907.11692, 2019.

MacMahon, M., Stankiewicz, B., and Kuipers, B. Walk
the talk: Connecting language, knowledge, and ac-
tion in route instructions. Def, 2(6):4, 2006.

Mei, H., Bansal, M., and Walter, M. R. Listen, at-
tend, and walk: Neural mapping of navigational
instructions to action sequences. In Thirtieth AAAI
Conference on Artificial Intelligence, 2016.

Micheli, V. and Fleuret, F. Language models are few-
shot butlers. arXiv preprint arXiv:2104.07972, 2021.

Min, S. Y., Chaplot, D. S., Ravikumar, P., Bisk, Y.,
and Salakhutdinov, R. Film: Following instructions
in language with modular methods, 2021.

--- Page 11 ---
Plan, Eliminate, and Track

Misra, D., Langford, J., and Artzi, Y. Mapping instruc-
tions and visual observations to actions with rein-
forcement learning. arXiv preprint arXiv:1704.08795,
2017.

Nair, S., Mitchell, E., Chen, K., Savarese, S., Finn, C.,
et al. Learning language-conditioned robot behay-
ior from offline data and crowd-sourced annotation.
In Conference on Robot Learning, pp. 1303-1315.
PMLR, 2022.

Oh, J., Singh, S., Lee, H., and Kohli, P. Zero-shot task
generalization with multi-task deep reinforcement
learning. In International Conference on Machine
Learning, pp. 2661-2670. PMLR, 2017.

Radford, A., Wu, J., Child, R., Luan, D., Amodei, D.,
and Sutskever, I. Language models are unsupervised
multitask learners. 2019.

See, A., Liu, P. J., and Manning, C. D. Get to the
point: Summarization with pointer-generator net-
works. arXiv preprint arXiv:1704.04368, 2017.

Sharma, P., Torralba, A., and Andreas, J. Skill in-
duction and planning with latent language. arXiv
preprint arXiv:2110.01517, 2021.

Shridhar, M., Thomason, J., Gordon, D., Bisk, Y.,
Han, W., Mottaghi, R., Zettlemoyer, L., and Fox,
D. Alfred: A benchmark for interpreting grounded
instructions for everyday tasks. In Proceedings of
the IEEE/CVF conference on computer vision and
pattern recognition, pp. 10740-10749, 2020a.

Shridhar, M., Yuan, X., Coté, M.-A., Bisk, Y., Trischler,
A., and Hausknecht, M. Alfworld: Aligning text
and embodied environments for interactive learning.
arXiv preprint arXiv:2010.03768, 2020b.

Shridhar, M., Manuelli, L., and Fox, D. Cliport: What
and where pathways for robotic manipulation. In
Conference on Robot Learning, pp. 894-906. PMLR,
2022.

Smith, S., Patwary, M., Norick, B., LeGresley, P., Ra-
jbhandari, S., Casper, J., Liu, Z., Prabhumoye, S.,
Zerveas, G., Korthikanti, V., Zheng, E., Child, R..,
Aminabadi, R. Y., Bernauer, J., Song, X., Shoeybi,
M., He, Y., Houston, M., Tiwary, S., and Catan-
zaro, B. Using deepspeed and megatron to train
megatron-turing NLG 530b, A large-scale generative
language model. CoRR, abs/2201.11990, 2022. URL
https: //arxiv.org/abs/2201.11990.

Song, C. H., Wu, J., Washington, C., Sadler, B. M.,
Chao, W.-L., and Su, Y. Llm-planner: Few-shot
grounded planning for embodied agents with large

language models. arXiv preprint arXiv:2212.04088,
2022.

Stepputtis, S., Campbell, J., Phielipp, M., Lee, S.,
Baral, C., and Ben Amor, H. Language-conditioned
imitation learning for robot manipulation tasks. Ad-
vances in Neural Information Processing Systems,
33:13139-13150, 2020.

Tafjord, O. and Clark, P.
question-answering with macaw.
arXiv:2109.02598, 2021.

General-purpose
arXiv preprint

Tellex, S., Kollar, T., Dickerson, S., Walter, M., Baner-
jee, A., Teller, S., and Roy, N. Understanding natu-
ral language commands for robotic navigation and
mobile manipulation. In Proceedings of the AAAI
Conference on Artificial Intelligence, volume 25, pp.
507-1514, 2011.

Yao, S., Rao, R., Hausknecht, M., and Narasimhan,
K. Keep calm and explore: Language models for
action generation in text-based games, 2020. URL
https: //arxiv.org/abs/2010.02903.

Zahavy, T., Haroush, M., Merlis, N., Mankowitz, D. J.,
and Mannor, S. Learn what not to learn: Action
elimination with deep reinforcement learning. Ad-
vances in neural information processing systems, 31,
2018.

