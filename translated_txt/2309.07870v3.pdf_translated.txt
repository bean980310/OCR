--- ABSTRACT ---
대규모 언어 모델(LLM)에 대한 최근의 발전으로 연구자와 개발자는 자연어 인터페이스를 사용하여 다양한 작업을 자동으로 해결하고 환경, 사람 및 기타 에이전트와 상호 작용할 수 있는 자율 언어 에이전트를 구축할 수 있습니다. 우리는 언어 에이전트를 인공 일반 지능에 대한 유망한 방향으로 간주하고 이러한 발전을 더 광범위한 비전문가 대상에게 공개하는 것을 목표로 하는 오픈 소스 라이브러리인 AGENTS를 출시합니다. AGENTS는 계획, 메모리, 도구 사용, 다중 에이전트 통신 및 세분화된 심볼릭 제어를 포함한 중요한 기능을 지원하도록 신중하게 설계되었습니다. AGENTS는 비전문가가 많은 코딩 없이도 최첨단 자율 언어 에이전트를 빌드, 사용자 지정, 테스트, 조정 및 배포할 수 있으므로 사용자 친화적입니다. 이 라이브러리는 모듈화된 설계로 연구자가 쉽게 확장할 수 있으므로 연구 친화적이기도 합니다. AGENTS는 https://github.com/aiwaves-cn/agents에서 사용할 수 있습니다. 1
--- INTRODUCTION ---
&quot;자율 에이전트는 환경 내부에 위치하고 그 일부인 시스템으로, 환경을 감지하고 시간이 지남에 따라 환경에 따라 행동하여 자체 의제를 추구하고 미래에 감지한 내용을 실행합니다.&quot; 에이전트인가, 아니면 프로그램인가?: 자율 에이전트에 대한 분류법 [Franklin 및 Graesser, 1996] ChatGPT와 같은 대규모 언어 모델(LLM) [Brown 등, 2020, Ouyang 등, 2022, OpenAI, 2023]을 사용하면 복잡한 작업을 자동으로 해결하고 세상에서 인지, 추론, 계획 및 행동하여 환경, 인간 또는 다른 에이전트와 상호 작용할 수 있는 자율 에이전트를 구축할 수 있습니다 [Weng, 2023]. 언어 에이전트는 인공 일반 지능(AGI)을 향한 유망한 단계이며 고객 서비스, 컨설팅, 프로그래밍, 글쓰기, 교육 등과 같은 특정 역할에서 인간의 노력을 줄이는 데 도움이 될 수 있습니다. AutoGPT [Richards 외, 2023] 및 BabyAGI [Nakajima, 2023]와 같은 최근의 일부 데모는 언어 에이전트의 잠재력을 보여주었고 개발자, 연구자 및 비기술적인 대상으로부터 엄청난 관심을 얻었습니다. 흥미진진하지만 이러한 데모 또는 저장소의 대부분은 숙련된 개발자 또는 연구자에게도 새로운 에이전트를 사용자 지정, 조정 및 배포하기에 적합하지 않습니다. 이러한 제한은 이러한 데모가 일반적으로 언어 에이전트의 가능성을 보여주는 개념 증명인 반면 시간이 지남에 따라 언어 에이전트를 빌드하고 사용자 지정하는 데 사용할 수 있는 더 큰 프레임워크가 아니라는 사실에서 비롯됩니다. 게다가, 이러한 오픈소스 저장소의 대부분은 작업 분해[Nye et al., 2022], 장단기 기억[Zhou *Equal Contribution. Correspondence to: chunshu@aiwaves.cn Preprint. Work in progress. Web Navigation Planning OO Planning Web Navigation Multi-Agent ○ ○ AgentCommunication Agent(eg Writer) Tool Use Tool Use(eg Editor) SOP Human-Agent Interaction Figure 1: AGENTS framework의 예. et al., 2023a], 웹 탐색[Nakano et al., 2021], 도구 사용[Schick et al., 2023], 다중 에이전트 커뮤니케이션[Foerster et al., 2016]을 포함하여 언어 에이전트의 핵심 기능 중 일부만을 다룹니다. 게다가, 대부분(전부는 아니더라도)의 기존 언어 에이전트 프레임워크는 짧은 작업 설명에만 의존하고 LLM의 계획 및 행동 능력에 전적으로 의존합니다. 이로 인해 여러 실행에서 상당한 무작위성과 불일치가 발생하여 만족스럽지 못한 사용자 경험을 제공하고 언어 에이전트를 사용자 지정하고 조정하기 어렵게 만듭니다.우리는 앞서 언급한 제한 사항이 언어 에이전트의 최근 발전이 더 광범위한 비전문가 대상에 도달하고 사회에 긍정적인 영향을 미치는 데 중요한 장벽이라고 생각합니다.이를 위해 LLM 기반 언어 에이전트를 지원하는 언어 에이전트용 오픈 소스 라이브러리 및 프레임워크인 AGENTS를 출시합니다.AGENTS의 철학은 비전문가에게도 언어 에이전트의 사용자 지정, 조정 및 배포를 가능한 한 간단하게 만드는 동시에 개발자와 연구자에게도 쉽게 확장할 수 있도록 하는 것입니다.또한 라이브러리는 언어 에이전트를 위한 다재다능한 프레임워크로 만드는 다음과 같은 주요 기능도 제공합니다.장단기 메모리 Franklin과 Graesser[1996]에 따르면 자율 에이전트와 컴퓨터 프로그램(또는 머신 러닝 모델)의 주요 차이점은 머신 러닝 모델은 단일 입력/쿼리에만 응답하면 되는 반면 자율 에이전트는 시간이 지남에 따라 환경이나 다른 에이전트와 상호 작용해야 한다는 것입니다. 따라서 자율 에이전트에게 장단기 메모리를 유지하는 능력은 매우 중요합니다. AGENTS는 [Zhou et al., 2023a]의 메모리 구성 요소를 통합하고 언어 에이전트가 VectorDB 및 의미 검색을 사용하여 장기 메모리를 저장하고 검색하고 스크래치패드로 단기 작업 메모리를 정기적으로 업데이트할 수 있도록 합니다. 사용자는 구성 파일의 필드를 채우기만 하면 에이전트에 장기 메모리, 단기 메모리 또는 둘 다를 장착할 수 있습니다. 도구 사용 및 웹 탐색 자율 에이전트의 또 다른 중요한 기능은 외부 도구를 사용하고 인터넷을 서핑할 수 있는 기능입니다. 이는 언어 에이전트에게 특히 중요한데, 언어 인터페이스에 의존하기 때문에 언어 커뮤니케이션을 넘어서는 환경과 상호 작용하고 웹을 탐색하여 유용한 정보를 수집하기 위해 외부 도구를 사용해야 하기 때문입니다. [Patil et al., 2023]에 따라 AGENTS는 일반적으로 사용되는 몇 가지 외부 API를 지원하고 개발자가 다른 도구를 쉽게 통합할 수 있는 추상 클래스를 제공합니다. 또한 웹 검색 및 웹 탐색을 특수 API로 정의하여 에이전트가 인터넷을 탐색하고 정보를 수집할 수 있도록 합니다. 다중 에이전트 커뮤니케이션 단일 에이전트 기능 외에도 AGENTS는 다중 에이전트 시스템을 사용자 정의하는 것을 지원하며, 이는 게임[Park et al., 2023], 사회 실험[Li et al., 2023], 소프트웨어 개발[Qian et al., 2023] 등과 같은 특정 애플리케이션에 도움이 될 수 있습니다. AGENTS의 다중 에이전트 커뮤니케이션을 위한 새로운 기능 중 하나는 &quot;동적 스케줄링&quot; 기능입니다. 하드 코딩된 규칙으로 에이전트의 작업 순서를 스케줄링하는 대신, 동적 스케줄링은 &quot;중재자&quot; 역할을 하는 컨트롤러 에이전트를 정의하고 역할과 현재 기록을 고려하여 다음 작업을 수행할 에이전트를 결정하는 옵션을 제공합니다. 동적 스케줄링은 여러 에이전트 간의 커뮤니케이션을 보다 자연스럽고 유연하게 만들 수 있는 잠재력이 있습니다. 개발자는 자연어를 사용하여 구성 파일에 규칙을 지정하여 컨트롤러를 쉽게 사용자 정의할 수 있습니다. 인간-에이전트 상호작용 기존 에이전트 프레임워크의 한 가지 한계는 에이전트 또는 다중 에이전트가 자동으로 작업을 해결할 수 있도록 하지만 인간 사용자가 에이전트와 상호 작용하는 것이 쉽지 않거나 가능하지 않다는 것입니다.특히 다중 에이전트 시나리오에서 더욱 그렇습니다.AGENTS는 단일 에이전트와 다중 에이전트 시나리오에서 인간-에이전트 상호작용을 원활하게 지원하여 한 명 이상의 인간이 언어 에이전트와 통신하고 상호 작용할 수 있도록 합니다.제어 가능성 기존 에이전트 프레임워크는 일반적으로 시스템 프롬프트를 사용하여 에이전트의 동작을 정의하고 제어한 다음 에이전트가 스스로 계획하고 작동하도록 합니다.반대로 AGENTS는 표준 운영 절차(SOP)라고도 하는 상징적 계획을 통해 제어 가능한 에이전트를 구축하는 새로운 패러다임을 제공합니다.SOP는 에이전트가 작업을 수행하는 동안 마주칠 수 있는 다양한 상황과 상태 간의 전환 규칙을 정의하는 여러 상태의 그래프입니다. 실제 세계의 SOP와 유사하게 AGENTS의 SOP는 특정 작업이나 프로세스가 에이전트나 에이전트 그룹에서 수행되어야 하는 방법을 설명하는 단계별 지침의 세심하게 문서화된 집합입니다. SOP는 LLM에서 생성될 수 있으며 사용자가 에이전트를 사용자 지정하고 조정할 때 편집할 수 있습니다. 배포 후 에이전트는 각 상태에 대해 지정된 지침과 가이드라인에 따라 동작하고 환경, 인간 또는 다른 에이전트와의 상호 작용에 따라 현재 상태를 동적으로 조정합니다. 상징적 계획의 도입은 에이전트의 동작을 세부적으로 제어할 수 있는 기회를 제공하여 에이전트의 동작을 보다 안정적/예측 가능하게 만들고 동시에 에이전트를 조정/최적화하는 것을 용이하게 합니다. 또한 (다중) 에이전트 시스템을 사용자 지정할 때 자세한 SOP 및 구성 파일을 작성하는 데 드는 인적 노동을 줄이기 위해 자동화된 SOP 생성 파이프라인을 제안합니다. 자동화된 SOP 생성 파이프라인은 작업에 대한 간략한 설명이 주어진 검색 증강 생성을 통해 언어 에이전트에 대한 구성 파일을 생성할 수 있는 &quot;메타 에이전트&quot;입니다. AGENTS는 AIWaves²의 연구자와 엔지니어가 유지 관리하는 지속적인 노력입니다. 우리는 이 프로젝트에 대한 커뮤니티 기여자의 지원을 기대합니다. 라이브러리와 자세한 문서 및 튜토리얼은 GitHub³에서 제공됩니다.
--- RELATED WORK ---
2.1 자율 언어 에이전트 언어 에이전트의 개념은 최근에 매우 인기를 얻었으며 다양한 작업을 타겟으로 하는 다양한 언어 에이전트가 제안되었습니다. 예를 들어, 생성 에이전트[Park et al., 2023]는 인간의 사회적 행동을 모방하는 언어 에이전트를 개발했고, WebAgent[Gur et al., 2023]는 자연어 지침에 따라 실제 웹사이트에서 작업을 완료할 수 있는 언어 에이전트를 구축할 수 있는 가능성을 보여주었고, Qian et al.[2023]과 MetaGPT[Hong et al., 2023]는 다중 에이전트 커뮤니케이션 설정에서 소프트웨어 개발을 실험했고, Zhou et al.[2023a]는 대화형 쓰기 도우미 역할을 하는 언어 에이전트를 구축했습니다. 특정 작업을 타겟으로 하는 언어 에이전트 외에도 AutoGPT [Richards 등, 2023], BabyAGI [Nakajima, 2023], SuperAGI [SuperAGI, 2023]와 같은 최근의 오픈소스 프로젝트는 사용자가 원하는 모든 것을 수행하는 자율 에이전트를 구축하는 것을 목표로 하며 개발자와 비전문가 모두로부터 엄청난 관심을 끌었습니다.2.2 언어 에이전트 프레임워크 최근에는 언어 에이전트를 위한 몇 가지 오픈소스 프레임워크가 제안되었습니다.예를 들어, Transformers Agents [Wolf 등, 2020]는 자연어로 기술된 작업을 해결하기 위해 도구를 자동으로 사용할 수 있는 언어 에이전트를 구축합니다. LangChain[LangChain, 2022]은 종단 간 2https://www.aiwaves.org/ ³https://github.com/aiwaves-cn/agentsX X 프레임워크 변환기 에이전트를 지원합니다.표 1: 언어 에이전트 프레임워크 비교 도구 사용 장단기 메모리 다중 에이전트 인간-에이전트 상호 작용 기호 제어 LangChain Auto-GPT Gentopia XLang Meta-GPT Camel Agent Verse AGENTSX XX 자연어로 지정된 작업을 자동으로 해결할 수 있는 언어 에이전트입니다.Camel[Li et al., 2023]과 Agent Verse[Chen et al., 2023]는 다중 에이전트 시스템을 구축하는 데 맞춤화된 플랫폼입니다.Gentopia[Xu et al., 2023]와 XLang4는 도구 증강 에이전트를 구축하기 위한 라이브러리입니다. 표 1에서 이러한 플랫폼과 AGENTS가 지원하는 주요 기능을 설명합니다. AGENTS는 도구 사용, 장단기 메모리, 다중 에이전트 통신을 동시에 지원하는 유일한 프레임워크임을 알 수 있습니다. AGENTS는 또한 처음으로 심볼릭 플랜(SOP)을 통해 인간-에이전트 상호 작용과 제어 가능성을 제공합니다. 3 라이브러리 설계 코드 1: AGENTS를 사용하여 (다중) 에이전트 시스템을 초기화하고 실행하기 위한 예시 코드 def main() # agents는 하나 또는 여러 에이전트의 dict입니다. agents = sop = Agent.from_config(&quot;./config.json&quot;) SOP.from_config(&quot;./config.json&quot;) environment = Environment.from_config(&quot;./config.json&quot;) run (agents, sop, environment) AGENTS는 Franklin과 Graesser [1996]의 철학을 따라 설계되었습니다. &quot;자율 에이전트는 환경에 위치합니다.&quot; 따라서 agent와 environment는 AGENTS 프레임워크의 두 가지 주요 클래스입니다. 이 두 클래스 외에도 언어 에이전트를 보다 제어하기 쉽게 만들기 위해 SOP(Standard Operating Procedure의 약자)라는 기호 계획에 대한 클래스도 포함합니다. 이러한 주요 클래스는 모두 일반 텍스트로 채울 수 있는 구성 파일에서 초기화됩니다. 요약하면 AGENTS를 사용하여 (다중) 에이전트 시스템을 초기화하고 실행하기 위한 일반적인 스크립트는 코드 1에 나와 있습니다. 구성 파일은 이러한 핵심 객체를 정의할 뿐만 아니라 복잡한 프롬프트를 모듈화된 프롬프트 구성 요소로 인수분해합니다. 프롬프트의 인수분해는 사용자가 (다중) 에이전트 시스템을 구축하기 위해 필요로 하는 전문성 요구 사항과 노력을 크게 줄여줍니다. 단일 구성 파일을 사용하여 에이전트, 계획 및 기본 환경을 정의하면 언어 에이전트를 공유하는 것도 용이해집니다(에이전트 허브 섹션에서 논의). 이 세 가지 핵심 클래스는 각각 숙련된 개발자와 연구자가 덮어쓸 수 있는 표준화된 API로 구성됩니다. 이러한 클래스를 자세히 설명합니다. 코드 2: AGENTS에서 (다중) 에이전트 시스템의 실행 루프에 대한 예시 코드 def run (agents, sop, environment): while not sop.finished: agent, state sop.step(agents, environment) action=agent.step(state, environment) environment.update (agent, action) #23 동적 계획의 경우 선택 사항 #new_states = get_new_states (action) #sop.add_states (new_states)4 https://github.com/xlang-ai/xlang 3.1 에이전트 에이전트 클래스는 언어 에이전트를 추상화합니다. UML은 그림 1에 나와 있습니다. 에이전트가 장기-단기 메모리를 유지하고
--- METHOD ---
s는 환경을 관찰(agent. observe(environment)), 현재 상태에 따라 행동(agent. _ act())하고 메모리를 업데이트(agent. _update_memory())합니다. 이러한 모든 메서드는 agent.step() 메서드에 래핑됩니다. 이 인수분해를 통해 개발자는 에이전트를 새로운 기능으로 쉽게 사용자 정의할 수 있습니다. 기존 언어 에이전트 프레임워크와 달리 에이전트는 LLM을 기반으로 해야 한다고 가정하지만, 우리는 에이전트에 &quot;_is_human&quot; 속성을 포함합니다. &quot;True&quot;로 설정된 경우 (agent. _ act())는 인간 사용자에게 관찰 및 메모리 정보를 제공하고 인간 사용자가 작업을 입력할 때까지 기다립니다. 이 설계는 인간 사용자가 하나 이상의 언어 에이전트 역할을 수행할 수 있도록 하여 단일 에이전트 및 다중 에이전트 시스템 모두에서 유연한 인간-에이전트 상호 작용을 허용합니다. 개발자는 인간 사용자가 토론에서 팀원 역할을 하고 (에이전트 또는 인간 기반) 팀원과 협력하여 다른 팀을 이기거나 소프트웨어 회사의 CTO/엔지니어 역할을 하고 소프트웨어 개발을 위해 다른 사람과 협력하는 등 다양하고 흥미로운 애플리케이션을 구축할 수 있습니다. 3.2 SOP SOP 클래스에는 에이전트 상태의 그래프가 포함되어 있습니다. 각 상태는 SOP에서 설명하는 작업을 수행할 때 모든 에이전트의 특정 하위 작업 또는 하위 목표를 지정합니다. 상태는 State 클래스로 추상화됩니다. State 객체는 에이전트가 LLM과 에이전트가 상태에서 사용할 수 있는 다양한 도구나 API를 활용하도록 하는 모듈화된 프롬프트를 포함합니다. 우리는 에이전트가 상태에서 동작에 사용할 수 있는 모든 것을 &quot;Component&quot; 클래스로 추상화합니다. Component 클래스는 프롬프트와 도구 또는 외부 API의 다른 부분에 해당하는 두 개의 하위 클래스로 구성되며 각각 &quot;Prompt Component&quot;와 &quot;ToolComponent&quot;로 명명됩니다. PromptComponent에는 작업/목표, 규칙/제약 조건, 컨텍스트 내 학습을 위한 (단계별) 데모 및 출력 형식을 지정하는 모듈화된 프롬프트가 포함됩니다. ToolComponent는 웹 검색, 지식 기반 등과 같은 외부 도구 및 API를 포함하여 모듈화된 프롬프트를 넘어 더 복잡한 사용을 지원합니다. 도구의 결과는 프롬프트에 포함되거나 구성 파일에 따라 나중에 직접 반환되어 처리됩니다. SOP 객체에는 또한 다른 상태와 다음에 동작할 에이전트 간의 전환을 결정하는 LLM 기반 제어 함수가 포함됩니다. 상태 이동 함수는 sop._transit()으로 명명되고 에이전트 라우팅 함수는 sop._route()로 명명됩니다. 두 함수 모두 메인 루프에서 사용되는 sop.next() 함수에 래핑됩니다. Mike 안녕하세요, 도와드릴까요? 사용자 iPhone 15를 알고 계신가요? Mike 사용자 네, 준비되었습니다. 기쁩니다, Agod 씨! 약속을 진행하려면 약속 카드를 작성해 주시기 바랍니다. 다음 정보를 복사하여 작성한 후 저에게 보내주시면 예약을 완료해 드리겠습니다. Mike 네, iPhone 15에 대해 잘 알고 있습니다. iPhone 15 Pro Max는 48MP 기본 카메라, 12MP 초광각 카메라, 12MP 망원 카메라가 탑재된 Pro 수준의 카메라 시스템을 갖추고 있습니다. 또한 Always-On 및 ProMotion 기술이 적용된 Super Retina XDR 디스플레이를 탑재하여 뛰어난 시청 경험을 제공합니다. iPhone 15는 9월 15일부터 사전 주문이 가능하며 9월 22일에 출시됩니다. 고객은 최대 2대의 iPhone 15와 2대의 iPhone 15 Plus 기기를 구매할 수 있습니다. 가격은 월 250위안 또는 선불 5999위안부터 시작합니다. 또한 매입 및 할부 옵션도 이용할 수 있습니다. iPhone 15 Pro 및 Pro Max 모델은 프리미엄 티타늄으로 제작되어 역대 가장 가벼운 Pro 라인업입니다.[이름]: [전화번호]: [대략적인 위치]: [지구 학위]: 이 정보를 제공하면 약속을 잡고 다음 단계를 안내해 드리겠습니다.입력 내용을 입력하세요 보내기 다시 시작 그림 2: (a) 고객 서비스 담당자 그림 3: (b) 영업 담당자 3.3 환경 Environment 클래스는 담당자가 위치한 환경을 추상화합니다.환경은 두 가지 주요 함수인 environment._ observer() 및 environment.update().environment로 구성됩니다. _ watched the following table: ... sitting in the way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a 말하는 스타일: 마이크는 차분하고 절제된 어조로 말한다. 그는 말이 유창하고 정확하다. 다른 사람과의 관계: 마이크는 제인과 결혼했고 두 사람 사이에 아이가 있다. 그는 가족과 가까운 관계를 맺고 있으며 무엇보다도 그들의 행복을 소중히 여긴다. 캐릭터 배경: 마이크는 지난 10년 동안 인터넷 회사에서 일해 왔다. 그는 일에 열정적이며 프로그래밍 기술에 자부심을 느낀다. 그러나 그는 종종 힘든 일과 가족과 함께 보내는 양질의 시간 사이에서 균형을 찾기 위해 고군분투한다. 이러한 갈등은 이야기 전반에 걸쳐 마이크에게 긴장과 도전을 안겨준다. 조이 캐릭터 디자인: 완료 캐릭터 필요: 2명의 주요 캐릭터와 2명의 보조 캐릭터를 포함한 4명의 캐릭터 개요: 1장: 균형 잡기 -단어 수:관련 캐릭터: 마이크 스미스, 제인 블랙, 에밀리 스미스 - 요약: 1장에서 마이크와 제인은 일과 가족의 책임의 회오리에 갇힌다. 마이크는 끊임없이 직업의 요구에 압도당하는 반면, 제인은 교사로서의 경력과 어머니로서의 역할 사이에서 균형을 맞추기 위해 고군분투한다. 그들의 의사소통과 이해 부족은 가족 내에서 긴장과 갈등으로 이어진다. 한편, 어린 딸 에밀리는 부모님과 함께 보내는 양질의 시간을 갈구한다. 이 장에서는 Mike와 Jane이 시작할 자기 발견과 성장의 여정을 위한 무대를 마련한다. Abby 현재 목표: 개요 디자인 디자인 근거: Zoe의 제안을 바탕으로 이제 대본의 개요 디자인을 진행하겠습니다. Elmo와 Zoe가 제공한 제안을 분석하여 개요에 통합하여 현대 가족 윤리에 대한 설득력 있는 이야기를 만들 것입니다. ID:장 제목: 1장: 균형 잡기 디자인 근거: 이 장에서는 주인공 Mike와 Jane을 소개하고 이야기의 중심 갈등인 일과 가정의 균형을 맞추려는 투쟁을 설명합니다. 그림 4: 다중 에이전트 시스템: Fiction Studio. 기록자 총 인원: 이름: Mike Smith 성별: 남성 캐릭터 업무: 인터넷 회사 프로그래머 나이: Mike는 근면하고 헌신적인 사람입니다. 그는 지적이고 논리적이며 세부 사항 지향적입니다. 그는 약간 내성적이고 내성적일 수 있지만, 그는 가족을 깊이 사랑합니다.말하는 스타일: Mike는 차분하고 절제된 어조로 말합니다.그는 말이 유창하고 정확합니다.다른 사람과의 관계: Mike는 Jane과 결혼했고 그들 사이에 아이가 있습니다.그는 가족과 가까운 관계를 맺고 있으며 무엇보다도 그들의 행복을 소중히 여깁니다.캐릭터 배경: Mike는 지난 10년 동안 인터넷 회사에서 일해 왔습니다.그는 자신의 일에 열정적이며 프로그래밍 기술에 자부심을 가지고 있습니다.그러나 그는 종종 힘든 일과 가족과 함께 보내는 양질의 시간 사이에서 균형을 찾기 위해 고군분투합니다.이러한 갈등은 스토리 전반에 걸쳐 Mike에게 긴장과 도전을 안겨줍니다.캐릭터AGENTS에 기반한 (다중) 에이전트 시스템의 실행 논리는 매우 직관적입니다.코드 2에서 설명한 것처럼 각 반복에서 SOP는 먼저 상태 전환을 결정하고 에이전트와 환경에 따라 다음 에이전트를 선택합니다.그런 다음 에이전트는 상태와 환경에 따라 조치를 취합니다.그런 다음 환경은 새 조치에 따라 자체를 업데이트합니다. 마지막으로, 워크플로가 중간 실행 결과에 따라 계획을 동적으로 조정해야 하는 경우 작업의 출력을 구문 분석하고 새 상태를 정의하여 현재 SOP에 추가할 수 있습니다.3.4 핵심 기능의 구현 세부 정보 장단기 메모리: AGENTS는 Zhou et al. [2023a]에 따라 언어 에이전트에 대한 장단기 메모리를 구현합니다.특히, 장기 메모리는 작업 내역이며 문장 변환기[Reimers and Gurevych, 2019]에 의해 내장되어 VectorDB에 저장되고 의미 검색을 통해 쿼리됩니다.단기 메모리 또는 작업 메모리는 자연어 형태이며 신중하게 조정된 프롬프트를 통해 LLM에 의해 업데이트됩니다.도구 사용 및 웹 탐색: AGENTS는 ToolComponents를 통해 도구 사용 및 웹 탐색을 지원합니다.각 외부 도구 또는 API에 대해 개발자는 ToolComponent.func() 메서드에서 API 호출을 래핑할 수 있습니다. API 호출이 컨텍스트에 따라 달라지는 복잡한 도구의 경우 AGENTS는 OpenAI의 GPT API의 &quot;함수 호출&quot; 기능을 통합하여 LLM이 도구를 사용하는 방법을 결정하도록 합니다. 웹 탐색은 웹 검색을 특수 도구로 구현하여 달성됩니다. 다중 에이전트 통신: 사전 정의된 규칙(예: 각 에이전트가 순차적으로 작동하도록 함)을 사용하여 에이전트의 작업 순서를 제어하는 대부분의 기존 다중 에이전트 시스템 프레임워크와 달리 AGENTS에는 이전 작업, 환경 및 현재 상태의 대상을 고려하여 LLM을 사용하여 다음 작업을 수행할 에이전트를 동적으로 결정하는 컨트롤러 기능이 포함되어 있습니다. 이를 통해 다중 에이전트 통신이 더 유연해집니다. 인간-대리인 상호작용: AGENTS는 인간 사용자가 구성 파일에서 특정 에이전트의 &quot;is_human&quot; 필드를 &quot;True&quot;로 변경할 수 있도록 하여 다중 에이전트 시스템에서 인간-대리인 상호작용을 지원합니다. 이 경우 사용자는 스스로 에이전트 역할을 수행하고 자신의 동작을 입력하고 환경의 다른 언어 에이전트와 상호 작용할 수 있습니다. 토론 주제: 창의적인 분야에서 AI가 인간을 대체해야 할까요?? 사용자 내 정체성을 방어하기 위해 무엇을 해야 할지 생각해 보세요. David(토론 심사 위원) 이제 선택한 주제에 따라 순차적인 토론을 진행하세요. 긍정적 관점: AI는 창의적인 분야에서 인간을 대체해야 합니다. 왜냐하면 효율적으로 예술과 콘텐츠를 생산하고 비용을 절감하며 인간의 편견을 없앨 수 있기 때문입니다. James(긍정적 2번째) Mary, 정체성을 방어하기 위해 직관, 감정, 복잡한 인간 경험을 이해하는 능력과 같이 인간이 창의적인 분야에 가져오는 고유한 특성과 관점을 강조할 수 있습니다. 인간적 연결의 가치와 인간이 만든 예술과 콘텐츠에서 나오는 진정성을 강조하세요. 부정적 관점: AI는 진정한 창의성, 감정, 복잡한 인간 경험을 이해하는 능력이 부족하기 때문에 창의적인 분야에서 인간을 대체해서는 안 됩니다.Jennifer(긍정적_세 번째) Mary, 자신의 정체성을 지키기 위해 예술과 콘텐츠 창작의 경계를 넓히는 데 있어 인간의 창의성과 혁신의 중요성을 강조할 수도 있습니다.인간의 상상력과 틀에서 벗어난 사고능력의 대체 불가능한 역할을 강조하세요.또한 창의적인 분야에서 AI에만 의존하는 것의 윤리적 의미에 대해 논의할 수 있습니다.User&#39;agent Audience David(토론 심판) Emily(부정적_첫 번째) James(긍정적_두 번째) Jennifer(긍정적_세 번째) John(긍정적_토론_조직자) Mary(긍정적_첫 번째) Michael(부정적_토론_조직자) Sarah(부정적_세 번째) William(부정적_두 번째) 실행 사용자 여러분, 이 기회를 주셔서 감사합니다.오늘 저는 여러분 앞에 서서 창의적인 분야에서 AI가 인간을 대체해서는 안 된다고 주장합니다. Al이 확실히 효율성과 비용상의 이점을 제공하지만, 진정한 창의성은 우리의 감정과 복잡한 인간 경험에 대한 이해에서 태어나는 고유한 인간적 특성이라는 점을 기억하는 것이 중요합니다. John(Affirmative_Debate_organizer) Mary, 창의적인 분야에서 인간의 고유한 특성을 강조하는 것 외에도 인간의 직관과 복잡한 감정을 해석하고 전달하는 능력의 중요성에 대해서도 논의할 수 있습니다. 인간적 연결의 가치와 인간이 작업에 가져오는 개인적인 접촉을 강조하세요. 또한 창의적인 분야에서 Al에만 의존하는 것의 잠재적인 한계와 윤리적 우려 사항을 살펴볼 수 있습니다. David(Debate Judge) 이제 선택한 주제에 대한 무료 토론에 참여하세요. Emily(Negative_First) 신사 숙녀 여러분, 이 기회를 주셔서 감사합니다. 오늘은 Al이 창의적인 분야에서 인간을 대체해서는 안 된다고 주장하겠습니다. Al은 효율성과 비용상의 이점을 제공할 수 있지만, 창의적인 작업의 중요한 측면인 복잡한 인간의 감정을 진정으로 이해하고 표현하는 능력이 부족합니다. 사용자 이 무료 토론에서, 창작 분야에서 Al의 역할이 전부 아니면 전무의 시나리오가 될 필요는 없다는 것을 기억합시다. 우리는 인간 창의성의 본질을 보존하면서 Al의 잠재력을 활용할 수 있습니다. Al과 인간 간의 협업은 전례 없는 혁신과 예술적 표현으로 이어질 수 있습니다. Al과 인간 창의성의 강점을 결합하여 미래를 포용합시다. 사용자 물론입니다, William. 창작 분야에서 Al을 둘러싼 잠재적 위험과 윤리적 우려 사항을 해결하는 것이 중요합니다. 그러나 잠재적 이점을 완전히 무시하지 않는 것도 마찬가지로 중요합니다. 핵심은 책임감 있고 세심한 통합에 있습니다. Al은 도구 역할을 하여 인간의 창의성을 가리는 것이 아니라 증폭시킬 수 있습니다. 지침과 윤리적 기준을 설정함으로써 인간의 예술적 표현의 무결성을 보호하면서 혁신을 극대화할 수 있습니다. Al과 인간 창의성의 조화로운 공존을 위해 노력합시다. Emily(Negative_First) Mary, 창작 분야에서 Al과 인간 간의 협업의 중요성을 강조해 주셔서 감사합니다. AI는 귀중한 도구와 지원을 제공할 수 있지만, 인간 창의성의 본질과 그것이 가져오는 고유한 관점을 보존하는 것이 중요합니다. AI와 인간 창의성의 강점을 결합함으로써 전례 없는 혁신과 예술적 표현을 이룰 수 있습니다. Jennifer(Affirmative_Third) 사실, Mary, 창의적인 분야에서 AI를 책임감 있게 통합하는 것이 중요합니다. 명확한 지침과 윤리적 기준을 설정함으로써 AI가 인간의 창의성을 대체하는 것이 아니라 향상시키는 도구 역할을 하도록 할 수 있습니다. 이러한 조화로운 공존은 인간 예술적 표현의 고유한 관점과 진정성을 보존하면서 혁신을 극대화할 것입니다. 3.5 배포 그림 5: 토론에서의 인간-에이전트 상호 작용. 언어 에이전트를 위한 기존 오픈소스 프레임워크는 터미널이나 Gradio에서 실행되는 개념 증명 언어 에이전트를 구축하는 데 중점을 둡니다[Abid et al., 2019]. 반면, AGENTS는 FastAPI5를 사용하여 언어 에이전트를 API로 배포하는 것을 지원합니다. 이를 통해 개발자는 실제 애플리케이션에 언어 에이전트를 통합하는 것이 크게 용이해집니다. 3.6 에이전트 허브 AGENTS는 언어 에이전트 시스템의 개발, 테스트 및 튜닝을 용이하게 할 뿐만 아니라 언어 에이전트의 배포 및 공유를 보다 쉽게 만드는 것을 목표로 합니다. 이를 위해 사용자가 미세 조정된 언어 에이전트를 공유하고 다른 사람이 플랫폼에서 공유하는 유용한 언어 에이전트를 검색/다운로드할 수 있는 플랫폼인 AGENT HUB를 소개합니다. 이런 방식으로 커뮤니티 에이전트에서 시작하여 약간 수정하여 언어 에이전트를 쉽게 사용자 정의할 수 있습니다. 이렇게 하면 언어 에이전트를 처음부터 설계, 테스트 및 튜닝하는 데 드는 노력이 크게 줄어듭니다. 3. 에이전트 시스템의 자동 생성 SOP를 사용하여 언어 에이전트에 대한 세부적인 제어를 제공하지만 사용자가 SOP를 처음부터 수동으로 지정하는 것은 때로는 힘들 수 있습니다. 모든 상태에 대해 다른 상태, 연결 및 각 구성 요소에 대한 프롬프트와 도구를 설정해야 하기 때문입니다. 따라서 자동 SOP 생성을 위한 파이프라인을 신중하게 구현합니다. 당사의 SOP 생성 프레임워크는 검색 증강 생성(RAG)[Lewis et al., 2020]을 기반으로 합니다. SOP 생성 파이프라인 자체도 AGENTS 프레임워크를 기반으로 하며, 먼저 필요한 에이전트를 지정하고, 상태와 연결을 계획하고, 마지막으로 구성 요소를 생성하는 SOP를 갖습니다. 따라서 이 파이프라인은 다른 에이전트와 다중 에이전트 시스템을 생성할 수 있는 &quot;메타 에이전트&quot;로 간주될 수 있습니다. 자동 에이전트 생성 프레임워크에 대한 자세한 설명은 [Zhou et al., 2023b]에 설명되어 있습니다. Shttps://fastapi.tiangolo.com/ 사례 연구 그런 다음 단일 에이전트 시스템, 다중 에이전트 시스템 및 인간-에이전트 상호 작용이 필요한 시스템을 포함하여 라이브러리로 구축된 다양한 언어 에이전트에 대한 몇 가지 사례 연구를 제시합니다. 모든 데모는 http://www.aiwaves-agents.com/에서 제공됩니다. 4.1 단일 에이전트 시스템 잡담 봇, 지식 기반 및 웹 검색 엔진을 기반으로 하는 두 명의 고객 서비스 에이전트, 쇼핑 도우미 에이전트, 영업 에이전트를 포함하여 AGENTS를 사용하여 몇 가지 단일 에이전트 시스템을 구현합니다. 에이전트는 라이브러리의 다양한 기능과 AGENTS를 사용하여 다양한 사용 사례의 언어 에이전트를 구축할 수 있는 가능성을 보여줍니다. 그림 2와 3에서 각각 고객 서비스 담당자와 영업 담당자의 스크린샷을 제시합니다.4.2 다중 에이전트 시스템 또한 환경에서 서로 상호 작용하는 여러 에이전트로 구성된 다중 에이전트 시스템을 구축하는 방법을 보여줍니다.소설 스튜디오, 토론, 소프트웨어 회사를 포함한 세 가지 시나리오를 선택합니다.이러한 시나리오에는 다중 에이전트 시스템의 두 가지 주요 범주인 협력 시나리오와 경쟁 시나리오가 모두 포함됩니다.모든 시나리오에는 SOP(Symbol Plan)와 같은 상징적 계획을 통해 제어되는 여러 하위 작업이 포함됩니다.각 하위 작업에서 언어 에이전트의 동작을 쉽게 관찰하고 해당 프롬프트를 엔지니어링하여 시스템을 사용자 지정하고 개선할 수 있습니다.그림 4에서 소설 스튜디오 시스템의 시스템 스크린샷을 제시합니다.또한 그림 5에서 인간 사용자가 언어 에이전트와 토론에 참여하는 사례 연구에서 프레임워크의 인간-에이전트 상호 작용 기능을 보여줍니다.5 결론 LLM과 이를 기반으로 하는 언어 에이전트는 NLP/AI 커뮤니티와 우리 사회 전반에서 점점 더 중요한 역할을 하고 있습니다.AGENTS는 언어 에이전트를 위한 통합 프레임워크이자 오픈 소스 라이브러리입니다. AGENTS는 개발자가 언어 에이전트를 사용하여 애플리케이션을 빌드하고, 연구자가 언어 에이전트 연구를 수행하고, 일반 비기술 대상자가 개인화된 언어 에이전트를 빌드하고 사용자 정의할 수 있도록 지원합니다. 참고문헌 Stan Franklin과 Art Graesser. Is it an agent, or just a program?: A taxonomy for autonomous agents. International workshop on agent theories, architectures, and languages, 21-35쪽. Springer, 1996. Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, Dario Amodei. 언어 모델은 few-shot 학습자입니다. H. Larochelle, M. Ranzato, R. Hadsell, MF Balcan, H. Lin 편집, 신경 정보 처리 시스템의 발전, 33권, 1877-1901페이지. Curran Associates, Inc., 2020. URL https://proceedings. neurips.cc/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf. Long Ouyang, Jeffrey Wu, Xu Jiang, Diogo Almeida, Carroll Wainwright, Pamela Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Gray, John Schulman, Jacob Hilton, Fraser Kelton, Luke Miller, Maddie Simens, Amanda Askell, Peter Welinder, Paul Christiano, Jan Leike, Ryan Lowe. 인간의 피드백을 통해 지시를 따르도록 언어 모델을 훈련합니다. Alice H. Oh, Alekh Agarwal, Danielle Belgrave, Kyunghyun Cho 편집자, 신경 정보 처리 시스템의 발전, 2022. URL https://openreview.net/forum?id=TG8KACxEON. OpenAI. GPT-4 기술 보고서, 2023. Lilian Weng. Llm 기반 자율 에이전트. lilianweng.github.io, 2023년 6월. URL https://lilianweng.github.io/posts/2023-06-23-agent/. Toran Bruce Richards 및 et al. 자동 gpt: 자율 gpt-4
--- EXPERIMENT ---
s [Li et al., 2023], 소프트웨어 개발 [Qian et al., 2023] 등. AGENTS의 다중 에이전트 커뮤니케이션을 위한 새로운 기능 중 하나는 &quot;동적 스케줄링&quot; 기능입니다. 하드코딩된 규칙으로 에이전트의 작업 순서를 스케줄링하는 대신, 동적 스케줄링은 역할과 현재 기록을 고려하여 다음 작업을 수행할 에이전트를 결정하는 &quot;중재자&quot; 역할을 하는 컨트롤러 에이전트를 정의하는 옵션을 제공합니다. 동적 스케줄링은 여러 에이전트 간의 커뮤니케이션을 보다 자연스럽고 유연하게 만들 수 있는 잠재력이 있습니다. 개발자는 자연어를 사용하여 구성 파일에서 규칙을 지정하여 컨트롤러를 쉽게 사용자 정의할 수 있습니다. 인간-에이전트 상호 작용 기존 에이전트 프레임워크의 한 가지 한계는 에이전트 또는 다중 에이전트가 자동으로 작업을 해결할 수 있도록 하지만 인간 사용자가 에이전트와 상호 작용하는 것이 쉽지 않거나 가능하지 않다는 것입니다. 특히 다중 에이전트 시나리오에서 그렇습니다. AGENTS는 단일 에이전트와 다중 에이전트 시나리오에서 인간-에이전트 상호 작용을 원활하게 지원하여 한 명 이상의 인간이 언어 에이전트와 통신하고 상호 작용할 수 있습니다. 제어 가능성 기존 에이전트 프레임워크는 일반적으로 시스템 프롬프트를 사용하여 에이전트의 동작을 정의하고 제어한 다음 에이전트가 스스로 계획하고 작동하도록 합니다.반대로 AGENTS는 표준 운영 절차(SOP)라고도 하는 상징적 계획을 통해 제어 가능한 에이전트를 구축하는 새로운 패러다임을 제공합니다.SOP는 에이전트가 작업을 수행하는 동안 마주칠 수 있는 다양한 상황과 상태 간의 전환 규칙을 정의하는 여러 상태의 그래프입니다.실제 세계의 SOP와 유사하게 AGENTS의 SOP는 에이전트 또는 에이전트 그룹이 특정 작업이나 프로세스를 수행하는 방법을 설명하는 꼼꼼하게 문서화된 단계별 지침 세트입니다.SOP는 LLM에서 생성하고 사용자가 에이전트를 사용자 지정하고 조정할 때 편집할 수 있습니다.배포 후 에이전트는 각 상태에 대해 지정된 지침과 가이드라인에 따라 동작하고 환경, 인간 또는 다른 에이전트와의 상호 작용에 따라 현재 상태를 동적으로 조정합니다. 상징적 계획을 도입하면 에이전트의 행동을 세부적으로 제어할 수 있는 기회가 제공되어 에이전트의 행동을 보다 안정적이고 예측 가능하게 만들고 동시에 에이전트를 조정/최적화하는 것이 용이해집니다. 또한 (다중) 에이전트 시스템을 사용자 정의할 때 자세한 SOP 및 구성 파일을 작성하는 데 드는 인적 노동을 줄이기 위해 자동화된 SOP 생성 파이프라인을 제안합니다. 자동화된 SOP 생성 파이프라인은 작업에 대한 간략한 설명이 제공된 검색 증강 생성을 통해 언어 에이전트에 대한 구성 파일을 생성할 수 있는 &quot;메타 에이전트&quot;입니다. AGENTS는 AIWaves²의 연구자와 엔지니어가 유지 관리하는 지속적인 노력입니다. 이 프로젝트에 대한 커뮤니티 기여자의 지원을 기대합니다. 라이브러리와 자세한 문서 및 튜토리얼은 GitHub³에서 제공됩니다. 관련 작업 2.1 자율 언어 에이전트 언어 에이전트라는 개념은 최근에 매우 인기를 얻었으며 다양한 작업을 타겟으로 하는 다양한 언어 에이전트가 제안되었습니다. 예를 들어, Generative Agents[Park et al., 2023]는 인간의 사회적 행동을 모방하는 언어 에이전트를 개발했고, WebAgent[Gur et al., 2023]는 자연어 지침에 따라 실제 웹사이트에서 작업을 완료할 수 있는 언어 에이전트를 구축할 수 있는 가능성을 보여주었고, Qian et al.[2023]과 MetaGPT[Hong et al., 2023]는 다중 에이전트 커뮤니케이션 설정에서 소프트웨어 개발을 실험했으며, Zhou et al.[2023a]는 대화형 쓰기 도우미 역할을 하는 언어 에이전트를 구축했습니다. 특정 작업을 타겟으로 하는 언어 에이전트 외에도 AutoGPT[Richards and et al., 2023], BabyAGI[Nakajima, 2023], SuperAGI[SuperAGI, 2023]와 같은 최근 오픈소스 프로젝트는 사용자가 원하는 것을 수행하는 자율 에이전트를 구축하는 것을 목표로 하며 개발자와 비전문가 모두로부터 엄청난 관심을 끌었습니다. 2.2 언어 에이전트 프레임워크 최근에는 언어 에이전트를 위한 몇 가지 오픈소스 프레임워크가 제안되었습니다.예를 들어, Transformers Agents[Wolf et al., 2020]는 자연어로 설명된 작업을 자동으로 해결하기 위해 도구를 사용할 수 있는 언어 에이전트를 구축합니다.LangChain[LangChain, 2022]은 종단 간 2https://www.aiwaves.org/ ³https://github.com/aiwaves-cn/agentsX X 프레임워크 Transformers Agents 표 1: 언어 에이전트 프레임워크 비교 도구 사용 장단기 메모리 다중 에이전트 인간-에이전트 상호 작용 심볼릭 제어 LangChain Auto-GPT Gentopia XLang Meta-GPT Camel Agent Verse AGENTSX XX 자연어로 지정된 작업을 자동으로 해결할 수 있는 언어 에이전트;Camel[Li et al., 2023]과 Agent Verse[Chen et al., 2023]는 다중 에이전트 시스템을 구축하는 데 맞춤화된 플랫폼입니다. Gentopia [Xu et al., 2023]와 XLang4는 도구 증강 에이전트를 구축하기 위한 라이브러리입니다. 표 1에서 이러한 플랫폼과 AGENTS가 지원하는 주요 기능을 설명합니다. AGENTS는 도구 사용, 장단기 메모리, 다중 에이전트 통신을 동시에 지원하는 유일한 프레임워크임을 알 수 있습니다. 또한 AGENTS는 처음으로 심볼릭 플랜(SOP)을 통해 인간-에이전트 상호 작용과 제어 가능성을 제공합니다. 3 라이브러리 설계 코드 1: AGENTS를 사용하여 (다중) 에이전트 시스템을 초기화하고 실행하기 위한 예시 코드 def main() # agents는 하나 또는 여러 에이전트의 dict입니다. agents = sop = Agent.from_config(&quot;./config.json&quot;) SOP.from_config(&quot;./config.json&quot;) environment = Environment.from_config(&quot;./config.json&quot;) run (agents, sop, environment) AGENTS는 Franklin과 Graesser [1996]의 철학을 따라 설계되었습니다. &quot;자율 에이전트는 환경에 위치합니다.&quot; 따라서 agent와 environment는 AGENTS 프레임워크의 두 가지 주요 클래스입니다. 이 두 클래스 외에도 언어 에이전트를 보다 제어하기 쉽게 만들기 위해 SOP(Standard Operating Procedure의 약자)라는 기호 계획에 대한 클래스도 포함합니다. 이러한 주요 클래스는 모두 일반 텍스트로 채울 수 있는 구성 파일에서 초기화됩니다. 요약하면 AGENTS를 사용하여 (다중) 에이전트 시스템을 초기화하고 실행하기 위한 일반적인 스크립트는 코드 1에 설명되어 있습니다. 구성 파일은 이러한 핵심 객체를 정의할 뿐만 아니라 복잡한 프롬프트를 모듈화된 프롬프트 구성 요소로 인수분해합니다. 프롬프트의 인수분해는 사용자가 (다중) 에이전트 시스템을 구축하기 위해 필요로 하는 전문성 요구 사항과 노력을 크게 줄여줍니다. 단일 구성 파일을 사용하여 에이전트, 계획 및 기본 환경을 정의하면 언어 에이전트를 공유하는 것도 용이해집니다(에이전트 허브 섹션에서 논의).이 세 가지 핵심 클래스는 각각 숙련된 개발자와 연구자가 덮어쓸 수 있는 표준화된 API로 구성됩니다.다음 클래스에 대해 자세히 설명합니다.코드 2: AGENTS에서 (다중) 에이전트 시스템의 실행 루프에 대한 예제 코드 def run (agents, sop, environment): while not sop.finished: agent, state sop.step(agents, environment) action=agent.step(state, environment) environment.update (agent, action) #23 동적 계획의 경우 선택 사항 #new_states = get_new_states (action) # sop.add_states (new_states)4 https://github.com/xlang-ai/xlang 3.1 에이전트 에이전트 클래스는 언어 에이전트를 추상화합니다. 그림 1에 UML이 설명되어 있습니다. 에이전트가 장단기 메모리를 유지하고 환경을 관찰하는 방법(agent. observe(environment)), 현재 상태에 따라 행동하는 방법(agent. _ act()) 및 메모리를 업데이트하는 방법(agent. _update_memory())이 있는 것을 볼 수 있습니다. 이러한 모든 방법은 agent.step() 메서드에 래핑됩니다. 이 인수분해를 통해 개발자는 에이전트를 새로운 기능으로 쉽게 사용자 지정할 수 있습니다. 기존 언어 에이전트 프레임워크와 달리 에이전트는 LLM을 기반으로 해야 한다고 가정하지만, 우리는 에이전트에 &quot;_is_human&quot; 속성을 포함합니다. &quot;True&quot;로 설정된 경우 (agent. _ act())는 인간 사용자에게 관찰 및 메모리 정보를 제공하고 인간 사용자가 작업을 입력할 때까지 기다립니다. 이 설계는 인간 사용자가 하나 이상의 언어 에이전트 역할을 수행할 수 있도록 하여 단일 에이전트 및 다중 에이전트 시스템 모두에서 유연한 인간-에이전트 상호 작용을 허용합니다. 개발자는 인간 사용자가 토론에서 팀원 역할을 하고 (에이전트 또는 인간 기반) 팀원과 협력하여 다른 팀을 이기거나 소프트웨어 회사의 CTO/엔지니어 역할을 하고 소프트웨어 개발을 위해 다른 사람과 협력하는 등 다양하고 흥미로운 애플리케이션을 구축할 수 있습니다. 3.2 SOP SOP 클래스에는 에이전트 상태의 그래프가 포함되어 있습니다. 각 상태는 SOP에서 설명하는 작업을 수행할 때 모든 에이전트의 특정 하위 작업 또는 하위 목표를 지정합니다. 상태는 State 클래스로 추상화됩니다. State 객체는 에이전트가 LLM과 에이전트가 상태에서 사용할 수 있는 다양한 도구나 API를 활용하도록 하는 모듈화된 프롬프트를 포함합니다. 우리는 에이전트가 상태에서 동작에 사용할 수 있는 모든 것을 &quot;Component&quot; 클래스로 추상화합니다. Component 클래스는 프롬프트와 도구 또는 외부 API의 다른 부분에 해당하는 두 개의 하위 클래스로 구성되며 각각 &quot;Prompt Component&quot;와 &quot;ToolComponent&quot;로 명명됩니다. PromptComponent에는 작업/목표, 규칙/제약 조건, 컨텍스트 내 학습을 위한 (단계별) 데모 및 출력 형식을 지정하는 모듈화된 프롬프트가 포함됩니다. ToolComponent는 웹 검색, 지식 기반 등과 같은 외부 도구 및 API를 포함하여 모듈화된 프롬프트를 넘어 더 복잡한 사용을 지원합니다. 도구의 결과는 프롬프트에 포함되거나 구성 파일에 따라 나중에 직접 반환되어 처리됩니다. SOP 객체에는 또한 다른 상태와 다음에 동작할 에이전트 간의 전환을 결정하는 LLM 기반 제어 함수가 포함됩니다. 상태 이동 함수는 sop._transit()으로 명명되고 에이전트 라우팅 함수는 sop._route()로 명명됩니다. 두 함수 모두 메인 루프에서 사용되는 sop.next() 함수에 래핑됩니다. Mike 안녕하세요, 도와드릴까요? 사용자 iPhone 15를 알고 계신가요? Mike 사용자 네, 준비되었습니다. 기쁩니다, Agod 씨! 약속을 진행하려면 약속 카드를 작성해 주시기 바랍니다. 다음 정보를 복사하여 작성한 후 저에게 보내주시면 예약을 완료해 드리겠습니다. Mike 네, iPhone 15에 대해 잘 알고 있습니다. iPhone 15 Pro Max는 48MP 기본 카메라, 12MP 초광각 카메라, 12MP 망원 카메라가 탑재된 Pro 수준의 카메라 시스템을 갖추고 있습니다. 또한 Always-On 및 ProMotion 기술이 적용된 Super Retina XDR 디스플레이를 탑재하여 뛰어난 시청 경험을 제공합니다. iPhone 15는 9월 15일부터 사전 주문이 가능하며 9월 22일에 출시됩니다. 고객은 최대 2대의 iPhone 15와 2대의 iPhone 15 Plus 기기를 구매할 수 있습니다. 가격은 월 250위안 또는 선불 5999위안부터 시작합니다. 또한 매입 및 할부 옵션도 이용할 수 있습니다. iPhone 15 Pro 및 Pro Max 모델은 프리미엄 티타늄으로 제작되어 역대 가장 가벼운 Pro 라인업입니다.[이름]: [전화번호]: [대략적인 위치]: [지구 학위]: 이 정보를 제공하면 약속을 잡고 다음 단계를 안내해 드리겠습니다.입력 내용을 입력하세요 보내기 다시 시작 그림 2: (a) 고객 서비스 담당자 그림 3: (b) 영업 담당자 3.3 환경 Environment 클래스는 담당자가 위치한 환경을 추상화합니다.환경은 두 가지 주요 함수인 environment._ observer() 및 environment.update().environment로 구성됩니다. _ watched the following table: ... sitting in the way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a way of a 말하는 스타일: 마이크는 차분하고 절제된 어조로 말한다. 그는 말이 유창하고 정확하다. 다른 사람과의 관계: 마이크는 제인과 결혼했고 두 사람 사이에 아이가 있다. 그는 가족과 가까운 관계를 맺고 있으며 무엇보다도 그들의 행복을 소중히 여긴다. 캐릭터 배경: 마이크는 지난 10년 동안 인터넷 회사에서 일해 왔다. 그는 일에 열정적이며 프로그래밍 기술에 자부심을 느낀다. 그러나 그는 종종 힘든 일과 가족과 함께 보내는 양질의 시간 사이에서 균형을 찾기 위해 고군분투한다. 이러한 갈등은 이야기 전반에 걸쳐 마이크에게 긴장과 도전을 안겨준다. 조이 캐릭터 디자인: 완료 캐릭터 필요: 2명의 주요 캐릭터와 2명의 보조 캐릭터를 포함한 4명의 캐릭터 개요: 1장: 균형 잡기 -단어 수:관련 캐릭터: 마이크 스미스, 제인 블랙, 에밀리 스미스 - 요약: 1장에서 마이크와 제인은 일과 가족의 책임의 회오리에 갇힌다. 마이크는 끊임없이 직업의 요구에 압도당하는 반면, 제인은 교사로서의 경력과 어머니로서의 역할 사이에서 균형을 맞추기 위해 고군분투한다. 그들의 의사소통과 이해 부족은 가족 내에서 긴장과 갈등으로 이어진다. 한편, 어린 딸 에밀리는 부모님과 함께 보내는 양질의 시간을 갈구한다. 이 장에서는 Mike와 Jane이 시작할 자기 발견과 성장의 여정을 위한 무대를 마련한다. Abby 현재 목표: 개요 디자인 디자인 근거: Zoe의 제안을 바탕으로 이제 대본의 개요 디자인을 진행하겠습니다. Elmo와 Zoe가 제공한 제안을 분석하여 개요에 통합하여 현대 가족 윤리에 대한 설득력 있는 이야기를 만들 것입니다. ID:장 제목: 1장: 균형 잡기 디자인 근거: 이 장에서는 주인공 Mike와 Jane을 소개하고 이야기의 중심 갈등인 일과 가정의 균형을 맞추려는 투쟁을 설명합니다. 그림 4: 다중 에이전트 시스템: Fiction Studio. 기록자 총 인원: 이름: Mike Smith 성별: 남성 캐릭터 업무: 인터넷 회사 프로그래머 나이: Mike는 근면하고 헌신적인 사람입니다. 그는 지적이고 논리적이며 세부 사항 지향적입니다. 그는 약간 내성적이고 내성적일 수 있지만, 그는 가족을 깊이 사랑합니다.말하는 스타일: Mike는 차분하고 절제된 어조로 말합니다.그는 말이 유창하고 정확합니다.다른 사람과의 관계: Mike는 Jane과 결혼했고 그들 사이에 아이가 있습니다.그는 가족과 가까운 관계를 맺고 있으며 무엇보다도 그들의 행복을 소중히 여깁니다.캐릭터 배경: Mike는 지난 10년 동안 인터넷 회사에서 일해 왔습니다.그는 자신의 일에 열정적이며 프로그래밍 기술에 자부심을 가지고 있습니다.그러나 그는 종종 힘든 일과 가족과 함께 보내는 양질의 시간 사이에서 균형을 찾기 위해 고군분투합니다.이러한 갈등은 스토리 전반에 걸쳐 Mike에게 긴장과 도전을 안겨줍니다.캐릭터AGENTS에 기반한 (다중) 에이전트 시스템의 실행 논리는 매우 직관적입니다.코드 2에서 설명한 것처럼 각 반복에서 SOP는 먼저 상태 전환을 결정하고 에이전트와 환경에 따라 다음 에이전트를 선택합니다.그런 다음 에이전트는 상태와 환경에 따라 조치를 취합니다.그런 다음 환경은 새 조치에 따라 자체를 업데이트합니다. 마지막으로, 워크플로가 중간 실행 결과에 따라 계획을 동적으로 조정해야 하는 경우 작업의 출력을 구문 분석하고 새 상태를 정의하여 현재 SOP에 추가할 수 있습니다.3.4 핵심 기능의 구현 세부 정보 장단기 메모리: AGENTS는 Zhou et al. [2023a]에 따라 언어 에이전트에 대한 장단기 메모리를 구현합니다.특히, 장기 메모리는 작업 내역이며 문장 변환기[Reimers and Gurevych, 2019]에 의해 내장되어 VectorDB에 저장되고 의미 검색을 통해 쿼리됩니다.단기 메모리 또는 작업 메모리는 자연어 형태이며 신중하게 조정된 프롬프트를 통해 LLM에 의해 업데이트됩니다.도구 사용 및 웹 탐색: AGENTS는 ToolComponents를 통해 도구 사용 및 웹 탐색을 지원합니다.각 외부 도구 또는 API에 대해 개발자는 ToolComponent.func() 메서드에서 API 호출을 래핑할 수 있습니다. API 호출이 컨텍스트에 따라 달라지는 복잡한 도구의 경우 AGENTS는 OpenAI의 GPT API의 &quot;함수 호출&quot; 기능을 통합하여 LLM이 도구를 사용하는 방법을 결정하도록 합니다. 웹 탐색은 웹 검색을 특수 도구로 구현하여 달성됩니다. 다중 에이전트 통신: 사전 정의된 규칙(예: 각 에이전트가 순차적으로 작동하도록 함)을 사용하여 에이전트의 작업 순서를 제어하는 대부분의 기존 다중 에이전트 시스템 프레임워크와 달리 AGENTS에는 이전 작업, 환경 및 현재 상태의 대상을 고려하여 LLM을 사용하여 다음 작업을 수행할 에이전트를 동적으로 결정하는 컨트롤러 기능이 포함되어 있습니다. 이를 통해 다중 에이전트 통신이 더 유연해집니다. 인간-대리인 상호작용: AGENTS는 인간 사용자가 구성 파일에서 특정 에이전트의 &quot;is_human&quot; 필드를 &quot;True&quot;로 변경할 수 있도록 하여 다중 에이전트 시스템에서 인간-대리인 상호작용을 지원합니다. 이 경우 사용자는 스스로 에이전트 역할을 수행하고 자신의 동작을 입력하고 환경의 다른 언어 에이전트와 상호 작용할 수 있습니다. 토론 주제: 창의적인 분야에서 AI가 인간을 대체해야 할까요?? 사용자 내 정체성을 방어하기 위해 무엇을 해야 할지 생각해 보세요. David(토론 심사 위원) 이제 선택한 주제에 따라 순차적인 토론을 진행하세요. 긍정적 관점: AI는 창의적인 분야에서 인간을 대체해야 합니다. 왜냐하면 효율적으로 예술과 콘텐츠를 생산하고 비용을 절감하며 인간의 편견을 없앨 수 있기 때문입니다. James(긍정적 2번째) Mary, 정체성을 방어하기 위해 직관, 감정, 복잡한 인간 경험을 이해하는 능력과 같이 인간이 창의적인 분야에 가져오는 고유한 특성과 관점을 강조할 수 있습니다. 인간적 연결의 가치와 인간이 만든 예술과 콘텐츠에서 나오는 진정성을 강조하세요. 부정적 관점: AI는 진정한 창의성, 감정, 복잡한 인간 경험을 이해하는 능력이 부족하기 때문에 창의적인 분야에서 인간을 대체해서는 안 됩니다.Jennifer(긍정적_세 번째) Mary, 자신의 정체성을 지키기 위해 예술과 콘텐츠 창작의 경계를 넓히는 데 있어 인간의 창의성과 혁신의 중요성을 강조할 수도 있습니다.인간의 상상력과 틀에서 벗어난 사고능력의 대체 불가능한 역할을 강조하세요.또한 창의적인 분야에서 AI에만 의존하는 것의 윤리적 의미에 대해 논의할 수 있습니다.User&#39;agent Audience David(토론 심판) Emily(부정적_첫 번째) James(긍정적_두 번째) Jennifer(긍정적_세 번째) John(긍정적_토론_조직자) Mary(긍정적_첫 번째) Michael(부정적_토론_조직자) Sarah(부정적_세 번째) William(부정적_두 번째) 실행 사용자 여러분, 이 기회를 주셔서 감사합니다.오늘 저는 여러분 앞에 서서 창의적인 분야에서 AI가 인간을 대체해서는 안 된다고 주장합니다. Al이 효율성과 비용상의 이점을 확실히 제공하지만, 진정한 창의성은 우리의 감정과 복잡한 인간 경험에 대한 이해에서 태어나는 고유한 인간적 특성이라는 점을 기억하는 것이 중요합니다. John(Affirmative_Debate_organizer) Mary, 창의적인 분야에서 인간의 고유한 특성을 강조하는 것 외에도 인간의 직관과 복잡한 감정을 해석하고 전달하는 능력의 중요성에 대해서도 논의할 수 있습니다. 인간적 연결의 가치와 인간이 작업에 가져오는 개인적인 접촉을 강조하세요. 또한 창의적인 분야에서 Al에만 의존하는 것의 잠재적인 한계와 윤리적 우려 사항을 살펴볼 수 있습니다. David(Debate Judge) 이제 선택한 주제에 대한 무료 토론에 참여하세요. Emily(Negative_First) 신사 숙녀 여러분, 이 기회를 주셔서 감사합니다. 오늘은 Al이 창의적인 분야에서 인간을 대체해서는 안 된다고 주장하겠습니다. Al은 효율성과 비용상의 이점을 제공할 수 있지만, 창의적인 작업의 중요한 측면인 복잡한 인간의 감정을 진정으로 이해하고 표현하는 능력이 부족합니다. 사용자 이 무료 토론에서, 창의적인 분야에서 Al의 역할이 전부 아니면 전무의 시나리오가 될 필요는 없다는 것을 기억합시다. 우리는 인간 창의성의 본질을 보존하면서 Al의 잠재력을 활용할 수 있습니다. Al과 인간 간의 협업은 전례 없는 혁신과 예술적 표현으로 이어질 수 있습니다. Al과 인간 창의성의 강점을 결합하여 미래를 포용합시다. 사용자 물론입니다, William. 창의적인 분야에서 Al을 둘러싼 잠재적 위험과 윤리적 우려 사항을 해결하는 것이 중요합니다. 그러나 잠재적 이점을 완전히 무시하지 않는 것도 마찬가지로 중요합니다. 핵심은 책임감 있고 세심한 통합에 있습니다. Al은 도구 역할을 하여 인간의 창의성을 가리는 것이 아니라 증폭시킬 수 있습니다. 지침과 윤리적 기준을 설정함으로써 인간의 예술적 표현의 무결성을 보호하면서 혁신을 극대화할 수 있습니다. Al과 인간 창의성의 조화로운 공존을 위해 노력합시다. Emily(Negative_First) 창의적인 분야에서 Al과 인간 간의 협업의 중요성을 강조해 주셔서 감사합니다, Mary. AI는 귀중한 도구와 지원을 제공할 수 있지만, 인간 창의성의 본질과 그것이 가져오는 고유한 관점을 보존하는 것이 중요합니다. AI와 인간 창의성의 강점을 결합함으로써 전례 없는 혁신과 예술적 표현을 이룰 수 있습니다. Jennifer(Affirmative_Third) 사실, Mary, 창의적인 분야에서 AI를 책임감 있게 통합하는 것이 중요합니다. 명확한 지침과 윤리적 기준을 설정함으로써 AI가 인간의 창의성을 대체하는 것이 아니라 향상시키는 도구 역할을 하도록 할 수 있습니다. 이러한 조화로운 공존은 인간 예술적 표현의 고유한 관점과 진정성을 보존하면서 혁신을 극대화할 것입니다. 3.5 배포 그림 5: 토론에서의 인간-에이전트 상호 작용. 언어 에이전트를 위한 기존 오픈소스 프레임워크는 터미널이나 Gradio에서 실행되는 개념 증명 언어 에이전트를 구축하는 데 중점을 둡니다[Abid et al., 2019]. 반면, AGENTS는 FastAPI5를 사용하여 언어 에이전트를 API로 배포하는 것을 지원합니다. 이를 통해 개발자는 실제 애플리케이션에 언어 에이전트를 통합하는 것이 크게 용이해집니다. 3.6 에이전트 허브 AGENTS는 언어 에이전트 시스템의 개발, 테스트 및 튜닝을 용이하게 할 뿐만 아니라 언어 에이전트의 배포 및 공유를 보다 쉽게 만드는 것을 목표로 합니다. 이를 위해 사용자가 미세 조정된 언어 에이전트를 공유하고 다른 사람이 플랫폼에서 공유하는 유용한 언어 에이전트를 검색/다운로드할 수 있는 플랫폼인 AGENT HUB를 소개합니다. 이런 방식으로 커뮤니티 에이전트에서 시작하여 약간 수정하여 언어 에이전트를 쉽게 사용자 정의할 수 있습니다. 이렇게 하면 언어 에이전트를 처음부터 설계, 테스트 및 튜닝하는 데 드는 노력이 크게 줄어듭니다. 3. 에이전트 시스템의 자동 생성 SOP를 사용하여 언어 에이전트에 대한 세부적인 제어를 제공하지만 사용자가 SOP를 처음부터 수동으로 지정하는 것은 때로는 힘들 수 있습니다. 모든 상태에 대해 다른 상태, 연결 및 각 구성 요소에 대한 프롬프트와 도구를 설정해야 하기 때문입니다. 따라서 자동 SOP 생성을 위한 파이프라인을 신중하게 구현합니다. 당사의 SOP 생성 프레임워크는 검색 증강 생성(RAG)[Lewis et al., 2020]을 기반으로 합니다. SOP 생성 파이프라인 자체도 AGENTS 프레임워크를 기반으로 하며, 먼저 필요한 에이전트를 지정하고, 상태와 연결을 계획하고, 마지막으로 구성 요소를 생성하는 SOP를 갖습니다. 따라서 이 파이프라인은 다른 에이전트와 다중 에이전트 시스템을 생성할 수 있는 &quot;메타 에이전트&quot;로 간주될 수 있습니다. 자동 에이전트 생성 프레임워크에 대한 자세한 설명은 [Zhou et al., 2023b]에 설명되어 있습니다. Shttps://fastapi.tiangolo.com/ 사례 연구 그런 다음 단일 에이전트 시스템, 다중 에이전트 시스템 및 인간-에이전트 상호 작용이 필요한 시스템을 포함하여 라이브러리로 구축된 다양한 언어 에이전트에 대한 몇 가지 사례 연구를 제시합니다. 모든 데모는 http://www.aiwaves-agents.com/에서 제공됩니다. 4.1 단일 에이전트 시스템 잡담 봇, 지식 기반 및 웹 검색 엔진을 기반으로 하는 두 명의 고객 서비스 에이전트, 쇼핑 도우미 에이전트, 영업 에이전트를 포함하여 AGENTS를 사용하여 몇 가지 단일 에이전트 시스템을 구현합니다. 에이전트는 라이브러리의 다양한 기능과 AGENTS를 사용하여 다양한 사용 사례의 언어 에이전트를 구축할 수 있는 가능성을 보여줍니다. 그림 2와 3에서 각각 고객 서비스 담당자와 영업 담당자의 스크린샷을 제시합니다. 4.2 다중 에이전트 시스템 또한 환경에서 서로 상호 작용하는 여러 에이전트로 구성된 다중 에이전트 시스템을 구축하는 방법을 보여줍니다. 소설 스튜디오, 토론, 소프트웨어 회사를 포함한 세 가지 시나리오를 선택합니다. 이러한 시나리오에는 다중 에이전트 시스템의 두 가지 주요 범주인 협력 시나리오와 경쟁 시나리오가 모두 포함됩니다. 모든 시나리오에는 SOP(Symbolic Plan)와 같은 상징적 계획을 통해 제어되는 여러 하위 작업이 포함됩니다. 각 하위 작업에서 언어 에이전트의 동작을 쉽게 관찰하고 해당 프롬프트를 엔지니어링하여 시스템을 사용자 지정하고 개선할 수 있습니다. 그림 4에서 소설 스튜디오 시스템의 시스템 스크린샷을 제시합니다. 또한 그림 5에서 인간 사용자가 언어 에이전트와 토론에 참여하는 사례 연구에서 프레임워크의 인간-에이전트 상호 작용 기능을 보여줍니다. 5
--- CONCLUSION ---
LLM과 이를 기반으로 하는 언어 에이전트는 NLP/AI 커뮤니티와 우리 사회 전반에서 점점 더 중요한 역할을 하고 있습니다. AGENTS는 언어 에이전트를 위한 통합 프레임워크이자 오픈 소스 라이브러리입니다. AGENTS는 개발자가 언어 에이전트를 사용하여 애플리케이션을 빌드하고, 연구자가 언어 에이전트 연구를 수행하고, 일반 비기술 대상자가 개인화된 언어 에이전트를 빌드하고 사용자 지정할 수 있도록 지원합니다. 참고문헌 Stan Franklin과 Art Graesser. Is it an agent, or just a program?: A taxonomy for autonomous agents. International workshop on agent theories, architectures, and languages, 21-35쪽. Springer, 1996. Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, Dario Amodei. 언어 모델은 few-shot 학습자입니다. H. Larochelle, M. Ranzato, R. Hadsell, MF Balcan, H. Lin 편집, 신경 정보 처리 시스템의 발전, 33권, 1877-1901페이지. Curran Associates, Inc., 2020. URL https://proceedings. neurips.cc/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf. Long Ouyang, Jeffrey Wu, Xu Jiang, Diogo Almeida, Carroll Wainwright, Pamela Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Gray, John Schulman, Jacob Hilton, Fraser Kelton, Luke Miller, Maddie Simens, Amanda Askell, Peter Welinder, Paul Christiano, Jan Leike, Ryan Lowe. 인간의 피드백을 통해 지시를 따르도록 언어 모델을 훈련합니다. Alice H. Oh, Alekh Agarwal, Danielle Belgrave, Kyunghyun Cho 편집자, 신경 정보 처리 시스템의 발전, 2022. URL https://openreview.net/forum?id=TG8KACxEON. OpenAI. GPT-4 기술 보고서, 2023. Lilian Weng. Llm 기반 자율 에이전트. lilianweng.github.io, 2023년 6월. URL https://lilianweng.github.io/posts/2023-06-23-agent/. Toran Bruce Richards 외. Auto-gpt: 자율 gpt-4 실험, 2023. URL https://github.com/Significant-Gravitas/Auto-GPT. [소프트웨어]. Yohei Nakajima. Babyagi, 2023. URL https://github.com/yoheinakajima/babyagi. [소프트웨어]. Maxwell Nye, Anders Johan Andreassen, Guy Gur-Ari, Henryk Michalewski, Jacob Austin, David Bieber, David Dohan, Aitor Lewkowycz, Maarten Bosma, David Luan, Charles Sutton 및 Augustus Odena. 작업 표시: 언어 모델을 사용한 중간 계산을 위한 스크래치패드, 2022. URL https://openreview.net/forum?id=iedYJm9200a. Wangchunshu Zhou, Yuchen Eleanor Jiang, Peng Cui, Tiannan Wang, Zhenxin Xiao, Yifan Hou, Ryan Cotterell 및 Mrinmaya Sachan. Recurrentgpt: (임의로) 긴 텍스트의 대화형 생성, 2023a. Reiichiro Nakano, Jacob Hilton, Suchir Balaji, Jeff Wu, Long Ouyang, Christina Kim, Christopher Hesse, Shantanu Jain, Vineet Kosaraju, William Saunders, Xu Jiang, Karl Cobbe, Tyna Eloundou, Gretchen Krueger, Kevin Button, Matthew Knight, Benjamin Chess, John Schulman. Webgpt: 인간의 피드백을 통한 브라우저 지원 질문 답변. CoRR, abs/2112.09332, 2021. Timo Schick, Jane Dwivedi-Yu, Roberto Dessì, Roberta Raileanu, Maria Lomeli, Luke Zettlemoyer, Nicola Cancedda, Thomas Scialom. Toolformer: 언어 모델은 도구 사용을 스스로 학습할 수 있습니다. CORR, abs/2302.04761, 2023. Jakob N. Foerster, Yannis M. Assael, Nando de Freitas, Shimon Whiteson. 심층적 다중 에이전트 강화 학습을 통한 의사소통 학습. NIPS, 2137-2145페이지, 2016. Shishir G. Patil, Tianjun Zhang, Xin Wang, Joseph E. Gonzalez. Gorilla: 대규모 API와 연결된 대규모 언어 모델. arXiv 사전 인쇄본 arXiv:2305.15334, 2023. Joon Sung Park, Joseph C. O&#39;Brien, Carrie J. Cai, Meredith Ringel Morris, Percy Liang, Michael S. Bernstein. 생성 에이전트: 인간 행동의 대화형 시뮬레이션, 2023. Guohao Li, Hasan Abed Al Kader Hammoud, Hani Itani, Dmitrii Khizbullin 및 Bernard Ghanem. Camel: 대규모 언어 모델 사회의 &quot;마음&quot; 탐색을 위한 의사소통 에이전트, 2023. Chen Qian, Xin Cong, Cheng Yang, Weize Chen, Yusheng Su, Juyuan Xu, Zhiyuan Liu 및 Maosong Sun. 소프트웨어 개발을 위한 의사소통 에이전트, 2023. Izzeddin Gur, Hiroki Furuta, Austin Huang, Mustafa Safdari, Yutaka Matsuo, Douglas Eck 및 Aleksandra Faust. 계획, 장기적인 상황 이해 및 프로그램 합성 기능을 갖춘 실제 웹 에이전트, 2023. Sirui Hong, Xiawu Zheng, Jonathan Chen, Yuheng Cheng, Jinlin Wang, Ceyao Zhang, Zili Wang, Steven Ka Shing Yau, Zijuan Lin, Liyang Zhou, Chenyu Ran, Lingfeng Xiao 및 Chenglin Wu. Metagpt: 다중 에이전트 협업 프레임워크를 위한 메타 프로그래밍, 2023. SuperAGI. Superagi, 2023. URL https://github.com/Transformer Optimus/SuperAGI. [소프트웨어]. Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, Remi Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer, Patrick von Platen, Clara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain Gugger, Mariama Drame, Quentin Lhoest, Alexander Rush. Transformers: State-of-the-heart 자연어 처리. 2020 자연어 처리 경험적 방법에 대한 컨퍼런스: 시스템 데모, 38-45페이지, 온라인, 2020년 10월. Association for Computational Linguistics. doi: 10.18653/v1/2020.emnlp-demos.6. URL https://aclanthology.org/2020. emnlp-demos.6. 랭체인. Langchain 저장소. https://github.com/langchain-ai/langchain, 2022.Weize Chen, Yusheng Su, Jingwei Zuo, Cheng Yang, Chenfei Yuan, Chen Qian, Chi-Min Chan, Yujia Qin, Yaxi Lu, Ruobing Xie, Zhiyuan Liu, Maosong Sun 및 Jie Zhou. Agentverse: 다중 에이전트 협업 촉진 및 에이전트의 긴급 행동 탐색, 2023. Binfeng Xu, Xukun Liu, Hua Shen, Zeyu Han, Yuhan Li, Murong Yue, Zhiyuan Peng, Yuchen Liu, Ziyu Yao 및 Dongkuan Xu. Gentopia: 도구로 강화된 Ilms를 위한 협업 플랫폼, 2023. Nils Reimers 및 Iryna Gurevych. Sentence-BERT: siamese BERTNetworks를 사용한 문장 임베딩. 2019년 자연어 처리 경험적 방법 컨퍼런스 회의록. 계산 언어학 협회, 2019년 11월. URL https://arxiv.org/abs/1908.10084. Abubakar Abid, Ali Abdalla, Ali Abid, Dawood Khan, Abdulrahman Alfozan, and James Zou. Gradio: 야생에서 ML 모델의 번거로움 없는 공유 및 테스트. arXiv 사전 인쇄본 arXiv:1906.02569, 2019. Patrick SH Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal, Heinrich Küttler, Mike Lewis, Wen-tau Yih, Tim Rocktäschel, Sebastian Riedel, and Douwe Kiela. 지식 집약적 NLP 작업을 위한 검색 증강 생성. NeurIPS, 2020. Wangchunshu Zhou, Yuchen Eleanor Jiang, Long Li, Jialong Wu, Tiannan Wang, Shi Qiu, Jintian Zhang, Jing Chen, Ruipu Wu, Shuai Wang, Shiding Zhu, Jiyu Chen, Wentao Zhang, Ningyu Zhang, Huajun Chen, Peng Cui 및 Mrinmaya Sachan. 연결주의와 상징주의를 통합하는 언어 에이전트를 향하여. 2023b. 출판 예정.
