--- ABSTRACT ---
Neural Radiance Fields를 최적화하고 렌더링하는 것은 볼륨 렌더링에 필요한 샘플 수가 방대하기 때문에 계산 비용이 많이 듭니다. 최근 연구에는 방법을 가속화하는 데 도움이 되는 대체 샘플링 접근 방식이 포함되었지만 종종 작업의 초점이 아닙니다. 이 논문에서 여러 샘플링 접근 방식을 조사하고 비교하고 개선된 샘플링이 일반적으로 투과율 추정기의 통합된 개념 하에 NeRF 변형에 적용 가능하다는 것을 보여줍니다. 향후 실험을 용이하게 하기 위해 Nerf 관련 방법에 고급 샘플링 방법을 통합하기 위한 유연한 API를 제공하는 Python 도구 상자인 NerfAcc를 개발합니다. 기존 코드베이스를 최소한으로 수정하여 여러 최신 NeRF 방법의 학습 시간을 1.5배에서 20배까지 줄일 수 있음을 보여줌으로써 그 유연성을 보여줍니다. 또한 Instant-NGP와 같은 고도로 사용자 정의된 NeRF는 NerfAcc를 사용하여 기본 PyTorch에서 구현할 수 있습니다. 저희 코드는 https://www.nerfacc.com에서 오픈 소스로 제공됩니다. 1.
--- INTRODUCTION ---
신경 볼륨 렌더링은 Neural Radiance Field(NeRF) [16]가 핵심 혁신인 역 렌더링 문제에 혁명을 일으켰습니다. 연속적인 광도장 표현을 통해 모든 카메라 위치에서 장면의 새로운 뷰를 렌더링할 수 있습니다. 그러나 NERF의 최적화는 광도장의 신경 표현과 볼륨 렌더링에 필요한 많은 샘플로 인해 계산 비용이 많이 들 수 있습니다. 이러한 과제로 인해 NeRF 기반 최적화 및 렌더링의 실제 응용 프로그램이 제한되었습니다. 최근의 여러 연구에서는 보다 효율적인 광도장 표현을 제안하여 신경 볼륨 렌더링의 계산 비용을 성공적으로 줄였습니다[17, 35, 36, 4, 24, 7]. 특정 광도장 표현과 그 응용 프로그램에는 차이가 있지만 이러한 방법의 대부분은 광선을 따라 샘플을 만들고 알파 구성을 통해 이를 축적하는 유사한 볼륨 렌더링 파이프라인을 공유합니다. 그러나 효율적인 광도장 표현을 개발하는 데 집중한 상당한 노력에 비해 효율적인 샘플링을 통해 신경 볼륨 렌더링의 계산 비용을 줄이는 데는 제한적인 관심이 있었습니다. 최근 몇몇 연구에서는 방법을 가속화하기 위해 대체 샘플링 접근 방식을 포함했지만 [17, 35, 24, 2], 이러한 방법은 종종 이 논문의 주요 초점이 아닙니다. 게다가 고급 샘플링 접근 방식을 구현하려면 일반적으로 사소한 노력이 필요합니다. 예를 들어 Instant-NGP [17]와 Plenoxels [35]는 모두 레이 마칭 중에 공간 건너뛰기를 달성하기 위해 고도로 맞춤화된 CUDA 구현을 사용하는데, 이는 각각의 광도장 구현과 긴밀하게 결합되어 있습니다. 결과적으로 연구자들이 자신의 연구에서 이러한 고급 샘플링 접근 방식의 이점을 얻는 것은 어려울 수 있습니다. 이 논문에서는 문헌에서 여러 고급 샘플링 접근 방식을 조사하고 비교하고, 중요도 샘플링을 위한 투과율 추정을 생성하는 통합된 방식으로 모두 볼 수 있음을 보여주는 수학적 증명을 제공합니다. 분석 결과 투과율 추정기를 통해 샘플링 스펙트럼을 이해함으로써 새로운 샘플링 전략을 탐색할 수 있음을 보여줍니다. 이를 바탕으로 샘플링 절차를 신경 체적 렌더링 파이프라인에서 분리하고 개선된 샘플링이 일반적으로 다양한 NeRF 변형에 적용 가능함을 보여줍니다. 또한, 향후 실험을 용이하게 하기 위해 Nerf 관련 방법에 고급 샘플링 접근 방식을 통합하기 위한 유연한 Python API를 제공하는 플러그 앤 플레이 툴박스인 NerfAcc를 제안합니다.연구자들이 자체 코드베이스에 통합할 수 있습니다.NerfAcc를 사용하여 100줄 미만의 코드 변경으로 다양한 NeRF 방법[16, 4, 5, 7, 14, 21, 17]이 더 나은 성능으로 1.5배에서 20배의 학습 속도를 누릴 수 있음을 보여줍니다.특히 NerfAcc 라이브러리를 사용하면 동일한 시간 내에 순수한 Python 코드로 Instant-NGP[17] 모델을 학습하고 공식 순수 CUDA 구현보다 약간 더 나은 성능(+0.2dB)을 얻을 수 있습니다.본 논문은 커뮤니티에 대한 독특한 기여를 제공합니다.새로운 알고리즘을 소개하는 다른 논문과 달리, 본 연구는 중요성에도 불구하고 종종 간과되는 다양한 샘플링 접근 방식의 복잡성에 빛을 비춥니다. 우리가 아는 한, 이 연구는 신경 복사장의 맥락에서 이 중요한 측면을 깊이 파고든 최초의 논문이며, 연구자들이 기존 샘플링 알고리즘을 새로운 관점에서 볼 수 있도록 하는 새롭고 통합된 개념을 제공합니다. 또한, 이 분야의 연구 개발을 용이하게 하는 툴박스를 제공합니다. 우리는 수학적 아이디어를 효율적이고 수정하기 쉬운 구현으로 변환하는 것이 연구 개발에 기본이라고 믿습니다. 전반적으로, 우리는 제안된 개념과 툴박스가 새로운 연구 아이디어에 영감을 주고 이 분야의 진전을 가속화할 수 있기를 바랍니다. 2.
--- RELATED WORK ---
s NeRF 코드베이스. 최근 NeRF 관련 연구의 폭발적 증가로 수많은 논문이 나왔으며, 그 중 다수가 자체 코드베이스를 공개했습니다[1, 2, 4, 7, 13, 16, 19, 37, 9]. 이러한 코드베이스는 표면 재구성[18, 32, 34], 복사장 표현[1, 2, 17, 24, 35], 동적 모델링[5, 7, 13, 21], 카메라 최적화[14, 33]를 포함하여 NeRF와 관련된 다양한 작업을 다룹니다. 그러나 각 코드베이스는 특정 작업에 맞게 조정되어 있으며 단일 접근 방식만 지원합니다. 이러한
--- METHOD ---
그러나 이들은 종종 작업의 초점이 아닙니다. 이 논문에서 우리는 여러 샘플링 접근 방식을 조사하고 비교하고 개선된 샘플링이 일반적으로 투과율 추정기의 통합된 개념 하에서 NeRF 변형에 적용 가능하다는 것을 보여줍니다. 미래의
--- EXPERIMENT ---
s에서 NerfAcc를 개발합니다. NerfAcc는 고급 샘플링 방법을 NeRF 관련 방법에 통합하기 위한 유연한 API를 제공하는 Python 도구 상자입니다. 기존 코드베이스를 최소한으로 수정하여 여러 최신 NeRF 방법의 학습 시간을 1.5배에서 20배까지 줄일 수 있음을 보여줌으로써 그 유연성을 보여줍니다. 또한 Instant-NGP와 같은 고도로 사용자 정의된 NeRF는 NerfAcc를 사용하여 기본 PyTorch에서 구현할 수 있습니다. 저희 코드는 https://www.nerfacc.com에서 오픈 소스로 제공됩니다. 1. 서론 신경 볼륨 렌더링은 Neural Radiance Field(NeRF) [16]가 핵심 혁신으로 역 렌더링 문제에 혁명을 일으켰습니다. 연속적인 광도장 표현을 통해 모든 카메라 위치에서 장면의 새로운 뷰를 렌더링할 수 있습니다. 그러나 NERF의 최적화는 광도장의 신경 표현과 볼륨 렌더링에 필요한 많은 수의 샘플로 인해 계산 비용이 많이 들 수 있습니다. 이러한 과제로 인해 NeRF 기반 최적화 및 렌더링의 실제 응용 프로그램이 제한되었습니다. 최근의 여러 연구에서는 더 효율적인 광도장 표현을 제안하여 신경 볼륨 렌더링의 계산 비용을 성공적으로 줄였습니다[17, 35, 36, 4, 24, 7]. 특정 광도장 표현과 그 응용 분야에는 차이가 있지만, 이러한 방법의 대부분은 광선을 따라 샘플을 만들고 알파 합성을 통해 이를 축적하는 유사한 볼륨 렌더링 파이프라인을 공유합니다. 그러나 효율적인 광도장 표현을 개발하는 데 집중한 상당한 노력과 비교하면 효율적인 샘플링을 통해 신경 볼륨 렌더링의 계산 비용을 줄이는 데 주력한 것은 제한적입니다. 최근의 몇 가지 연구에서는 방법을 가속화하기 위한 대체 샘플링 접근 방식을 포함했지만[17, 35, 24, 2], 이러한 방법은 종종 이 논문의 주요 초점이 아닙니다. 게다가 고급 샘플링 접근 방식을 구현하려면 일반적으로 사소한 노력이 필요합니다. 예를 들어, Instant-NGP[17]와 Plenoxels[35]는 모두 광선 행진 중 공간 건너뛰기를 달성하기 위해 고도로 맞춤화된 CUDA 구현을 사용하는데, 이는 각각의 광도장 구현과 긴밀하게 결합되어 있습니다. 결과적으로, 연구자들이 자신의 연구에서 이러한 고급 샘플링 접근 방식의 이점을 얻는 것은 어려울 수 있습니다. 이 논문에서 우리는 문헌에서 여러 고급 샘플링 접근 방식을 조사하고 비교하고, 그것들이 모두 중요도 샘플링에 대한 투과율 추정을 생성하는 통합된 방식으로 볼 수 있음을 보여주는 수학적 증명을 제공합니다. 우리의 분석은 투과율 추정기를 통해 샘플링의 스펙트럼을 이해함으로써 새로운 샘플링 전략을 탐구할 수 있음을 보여줍니다. 이를 바탕으로, 우리는 샘플링 절차를 신경 체적 렌더링 파이프라인에서 분리하고, 개선된 샘플링이 일반적으로 NeRF의 다양한 변형에 적용 가능하다는 것을 보여줍니다. 또한, 미래의 실험을 용이하게 하기 위해, 우리는 NerfAcc를 제안합니다. 이것은 플러그 앤 플레이 툴박스로, 고급 샘플링 접근 방식을 NeRF 관련 방법에 통합하기 위한 유연한 Python API를 제공하며, 연구자들이 자신의 코드베이스에 통합할 준비가 되었습니다. 우리는 NerfAcc를 사용하여 100줄 미만의 코드 변경으로 다양한 NeRF 방법[16, 4, 5, 7, 14, 21, 17]이 더 나은 성능으로 1.5배에서 20배의 학습 속도를 누릴 수 있음을 보여줍니다. 특히 NerfAcc 라이브러리를 사용하면 동일한 시간 내에 순수한 Python 코드로 Instant-NGP[17] 모델을 학습하고 공식 순수 CUDA 구현보다 약간 더 나은 성능(+0.2dB)을 얻을 수 있습니다. 저희 논문은 커뮤니티에 대한 독특한 기여를 제공합니다. 새로운 알고리즘을 소개하는 다른 논문과 달리 저희의 연구는 중요성에도 불구하고 종종 간과되는 다양한 샘플링 접근 방식의 복잡성에 빛을 비춥니다. 저희가 아는 한, 이 연구는 신경 광도장의 맥락에서 이 중요한 측면을 심층적으로 다룬 최초의 논문이며 연구자들이 기존 샘플링 알고리즘을 새로운 관점에서 볼 수 있도록 하는 새로운 통합 개념을 제공합니다. 또한 이 분야의 연구 개발을 용이하게 하는 툴박스를 제공합니다. 우리는 수학적 아이디어를 효율적이고 수정하기 쉬운 구현으로 전환하는 것이 연구 개발에 기본이라고 믿습니다. 전반적으로, 우리는 제안된 개념과 툴박스가 새로운 연구 아이디어에 영감을 주고 이 분야의 진전을 가속화할 수 있기를 바랍니다. 2. 관련 연구 NeRF 코드베이스. 최근 NeRF 관련 연구가 폭발적으로 증가하면서 수많은 논문이 나왔고, 그 중 많은 논문이 자체 코드베이스를 공개했습니다[1, 2, 4, 7, 13, 16, 19, 37, 9]. 이러한 코드베이스는 표면 재구성[18, 32, 34], 광도장 표현[1, 2, 17, 24, 35], 동적 모델링[5, 7, 13, 21], 카메라 최적화[14, 33]를 포함하여 NeRF와 관련된 다양한 작업을 다룹니다. 그러나 각 코드베이스는 특정 작업에 맞게 조정되었으며 단일 접근 방식만 지원합니다. 대부분의 이러한 방법은 레이를 따라 샘플을 축적하는 동일한 볼륨 렌더링 파이프라인을 공유하지만, 구현을 한 코드베이스에서 다른 코드베이스로 전송하려면 사소한 노력이 필요합니다.이 연구에서는 모든 앞서 언급한 작업과 방법을 지원하는 플러그 앤 플레이 툴박스인 Nerf Acc를 도입하여 이러한 일반적인 샘플링 문제를 해결하여 기존 코드베이스에 쉽게 통합할 수 있습니다.NeRF 프레임워크.최근에는 NeRF-Factory[11], Nerfstudio[29], Kaolin-Wisp[28]와 같이 다양한 NeRF 변형을 단일 프레임워크로 통합하는 여러 프로젝트가 도입되었습니다.이러한 프레임워크는 향후 NeRF 관련 연구를 용이하게 하는 데 상당한 진전을 이루었습니다.NeRF-Factory는 독창적인 구현을 갖춘 NeRF 변형[16, 39, 24, 35, 1, 2, 30] 컬렉션을 제공하며 포괄적인 벤치마킹에 중점을 둡니다. Nerfstudio는 기존 문헌[16, 1, 2, 17, 15]에 도입된 중요한 기술을 통합하고 커뮤니티가 쉽게 구축할 수 있는 모듈식 구성 요소를 제공합니다.Kaolin-Wisp는 Kaolin[8] 프레임워크를 기반으로 구축되고 일련의 복셀 기반 NeRF 논문[27, 17, 26]을 구현합니다.그러나 이러한 프레임워크는 연구자가 프레임워크 내에서 개발하도록 장려하도록 설계되었으며, 자신의 코드베이스에서 작업하는 사용자에게는 이롭지 않습니다.게다가 NeRF 관련 연구의 활동이 많기 때문에 최신 개발 사항을 추적하고 고급 기술을 단일 프레임워크에 통합하는 것이 거의 불가능합니다.따라서 NerfAcc는 모든 코드베이스에 플러그인할 수 있는 독립 실행형 라이브러리로 설계되었습니다.광범위한 NERF 관련 방법을 지원하며 새로운 방법이 등장함에 따라 쉽게 유지 관리할 수 있습니다.3. 투과율을 통한 중요성 샘플링 문헌에는 여러 가지 고급 샘플링 접근 방식이 있습니다. 예를 들어, Plenoxels[35]는 희소 그리드를 사용하고, InstantNGP[17]는 점유 그리드를 사용하고, NeRF[16]는 조대-정밀 전략을 채택하고, Mip-NeRF 360[2]은 제안 네트워크를 제안합니다. 그러나 이러한 모든 접근 방식을 지원할 수 있는 툴박스를 만드는 것은 완전히 다른 방식으로 작동하기 때문에 쉬운 작업이 아닙니다. 이 섹션에서는 이러한 접근 방식을 모두 중요도 샘플링의 통합된 방식으로 볼 수 있음을 보여줍니다. 또한 투과율만 있으면 중요도 샘플링에 충분하다는 수학적 증명도 제공합니다. 따라서 각 방법은 본질적으로 고유한 Density Inf-^^^^ 실수 분포 Density Inf A 0.0.Estimator Inf 샘플 밀도 광선 방향 PDF 1. 광선 방향 PDF PDF 0. 광선 방향 LA LA 0.1. 광선 방향 투과율 0. 광선 방향 투과율 1. 광선 방향 투과율 1.0.0.0. 광선 방향 광선 방향 광선 방향 중요도 샘플링 (a) 균일 {거친 MLP NeRF...} 중요도 샘플링 (b) 공간 스킵 {Instant-NGP, Plenoxels,...} 중요도 샘플링 (c) PDF 접근 방식 {NeRF, Mip-NeRF 360,...} 그림 2: 투과율 추정기를 통한 샘플링의 설명. 공간적 건너뛰기 접근 방식(예: Instant-NGP의 Occupancy Grid [17])과 PDF 접근 방식(예: Mip-NeRF 360의 Proposal Network [2])은 서로 다르게 보이지만 둘 다 중요도 샘플링을 통해 샘플을 생성할 수 있는 투과율 추정기를 구성하는 것으로 볼 수 있습니다. 광선을 따라 투과율을 추정하는 것으로, 이를 투과율 추정기라고 합니다. 이러한 관찰을 통해 동일한 프레임워크에서 다양한 유형의 샘플링 접근 방식을 통합하고 NerfAcc 툴박스를 만들 수 있습니다. 3.1. 공식화 효율적 샘플링은 Graphics [6]에서 잘 탐구된 문제로, 최종 렌더링에 가장 큰 기여를 하는 영역을 식별하는 데 중점을 둡니다. 이 목표는 일반적으로 중요도 샘플링을 통해 달성되며, 이는 p(t)로 표시되는 확률 밀도 함수(PDF)를 기반으로 [tn, tf] 범위 사이에 샘플을 분포시키는 것을 목표로 합니다. 적분을 통해 누적 분포 함수(CDF)를 계산함으로써, 즉 F(t) = ſp(v)du, 역 변환 샘플링 방법을 사용하여 샘플이 생성됩니다: t = F¹ (u) 여기서 u ~ U[0, 1]. (1) 체적 렌더링에서 최종 렌더링에 대한 각 샘플의 기여도는 누적 가중치 T(t)o(t)로 표현됩니다: rt f C(r) = [* T(t) o(t) c(t) dt tn 여기서 T(t) = exp t • (-fo(s) ds). (2) 따라서 체적 렌더링에 대한 PDF는 p(t) = T(t)o(t)이고 CDF F(t) = √tp(v) du는 투과율 T(t)의 함수로 유도할 수 있습니다. F(t) = √ √ ² T(v)o(v) dv tn do(s)ds)] dv (3) - L = [ -xp ( - [[(s) de)] de = tn = 1dv ехр tn • ( -_ o(s)ds) = 1 − T(t). tn 따라서 CDF F(t)를 역 샘플링하는 것은 투과율 T(t)를 역 샘플링하는 것과 동일합니다. 따라서 투과율 추정기만으로 최적 샘플을 결정할 수 있습니다. 직관적으로 이것은 영역 주변에 더 많은 샘플을 두는 것을 제안합니다 샘플링 방법 균일 PDF 추정기 p(ti) 투과율 추정기 T(ti) 업데이트 F 상수 t-tntf-tn 공간 스킵 1[0(ti)&gt;T] 11[(t)&gt;] PDF 접근 방식 σ(ti) exp(-σ(ti) dt) 1[σ (ti)&gt;T] EMA 111[(t)&gt;] SGD 인스턴스화 거친 MLP NERF [16] 인스턴트-NGP [17] 플레녹셀 [35] exp(-(ti) dt) SGD SGD 미세 MLP NERF [16] Mip-NeRF 360 [2] 표 1: 다양한 샘플링 접근 방식의 수학적 공식화. 투과율 추정기의 관점에서 각 샘플링 접근 방식 간의 중요한 수학적 차이점을 설명합니다. 표기법은 섹션 3.1을 참조하십시오. 투과율이 빠르게 변하는 경우 - 이는 광선이 표면에 부딪힐 때 정확히 발생하는 일입니다.구현 측면에서 이 관찰을 통해 많은 인기 있는 코드베이스에서 채택한 표준 구현인 계산 비용이 많이 드는 적분 T(v)o(v) du 대신 1 – T(t)를 사용하여 직접 CDF를 계산할 수 있습니다 [16, 1, 2, 29, 7].몬테카를로 샘플링을 사용한 델타 추적 [31]과 같은 고급 투과율 추정기 기술은 Graphics [6]에서 프로덕션 수준의 체적 렌더링에 활용되지만, NeRF는 장면 지오메트리가 미리 정의되지 않고 즉석에서 최적화된다는 고유한 설정에서 작동합니다.NeRF 최적화 중에 복사장은 반복 사이에서 변경되므로 각 단계 k에서 투과율 추정기의 동적 업데이트가 필요합니다.` : T(t)k−¹ — T(t)k.F: (4) 이는 지속적으로 변화하는 복사장에서 투과율을 정확하게 추정하기가 더 어려워지기 때문에 효율적인 샘플링에 추가적인 과제를 도입합니다. 현재의 접근 방식은 업데이트 함수 F로 지수 이동 평균(EMA) 또는 확률적 경사 하강법(SGD)을 사용합니다. 그러나 탐색할 수 있는 다른 업데이트 함수가 있을 수 있음을 알고 있습니다. 이러한 개념을 염두에 두고 효율적인 샘플링을 위한 기존 접근 방식 중 일부를 살펴보겠습니다. 균일. 투과율 추정치를 사용할 수 없는 경우 할 수 있는 유일한 가정은 광선을 따라 모든 지점이 최종 렌더링에 동등하게 기여한다는 것입니다. 수학적으로 이 가정은 상수 PDF와 선형적으로 감소하는 투과율 T(t) = 1−(t−tn)/(tƒ—tn)으로 변환됩니다. 이 경우 샘플링 프로세스는 광선을 따라 균일하게 샘플링하는 것과 동일합니다. 즉, ti - tnt (tf - tn) 균일 샘플링을 사용하는 모든 NeRF 모델은 바닐라 NeRF [16]의 거친 수준과 같이 본질적으로 이 선형 투과율 감소를 가정한다는 점에 주목할 가치가 있습니다. 그림은 그림 2(a)를 참조하세요. = 공간 건너뛰기. 균일한 샘플링을 개선하기 위한 보다 정교한 접근 방식은 빈 영역을 식별하여 샘플링 중에 건너뛰는 것입니다.이는 Instant-NGP의 Occupancy Grid [17] 및 Plenoctrees의 Sparse Grid [36]에서 제안된 바와 같습니다.이 기술은 보수적인 임계값 7을 사용하여 광선을 따라 밀도를 이진화합니다.ô(ti) = 1[σ(ti) &gt; 7].결과적으로, 조각별 상수 PDF는 p(ti): ô(ti)/Σ±1 ô(tj)로 표현할 수 있고, 조각별 선형 투과율 추정치는 T(t¿) = 1 − Σ ô(t;)/Σ±1 ô(t;)입니다.최적화 중에 이 추정치를 업데이트하기 위해 Instant-NGP [17]는 반복 k에 걸쳐 지수 이동 평균(EMA)으로 캐시된 밀도를 직접 업데이트합니다.σ (ti)k = y · σ(ti)k−1 + (1) σ(ti). 한편, Plenoxels[35]는 렌더링 손실을 통한 경사 하강법을 통해 밀도를 업데이트합니다.그림 2(b)에서 예를 참조하세요.PDF 접근 방식.또 다른 유형의 접근 방식은 이산 샘플로 광선을 따라 PDF를 직접 추정하는 것입니다.바닐라 NeRF[16]에서 거친 MLP는 체적 렌더링 손실을 사용하여 학습되어 밀도 집합 σ(tį)를 출력합니다.이를 통해 조각별 상수 PDF를 생성할 수 있습니다.p(ti) = σ(t;) exp(−σ(t;) dt), 조각별 선형 투과율 추정기 T(ti) T(t₁) = exp(−Σσ(tr) dt).이 접근 방식은 PDF 매칭 손실이 있는 Mip-ŇeRF 360[16]에서 더욱 개선되어 거친 수준에서 훨씬 더 작은 MLP인 Proposal Network를 사용하여 PDF 구성을 가속화할 수 있습니다. 두 경우 모두 투과율 추정치는 경사 하강법을 통해 업데이트됩니다.그림 2(c)에서 예를 참조하세요.표 1은 이러한 접근 방식에 대한 수학적 요약과 비교를 제공합니다.또한 그림 2에서 PDF(두 번째 행)와 투과율(세 번째 행) 관점에서 이러한 접근 방식을 직관적으로 비교하고 중요도 샘플링(마지막 행)을 통해 투과율 추정치에서 샘플을 만드는 방법을 보여주는 예를 제공합니다.이 시각화는 각 접근 방식의 장단점도 보여주는데, 이에 대해서는 3.3절에서 설명합니다.3.2 설계 공간 표현 선택.투과율 추정치는 명시적 폭셀[17, 35, 4], MLP[1, 2, 16] 또는 하이브리드 표현[29]을 사용할 수 있습니다. 추정자가 명시적인지 여부에 따라 규칙 기반 EMA [17, 4] 또는 약간의 감독이 있는 경사 하강법 [35, 2, 16, 29]으로 업데이트할 수 있습니다. 일반적으로 폭셀 기반 추정자는 암시적(예: MLP 기반) 추정자보다 빠르지만 앨리어싱 문제가 더 많습니다. 투과율 추정자의 표현은 광도장 표현의 발전으로 상당한 이점을 얻을 수 있다는 점에 주목할 가치가 있습니다. 예를 들어, Nerfacto 모델 [29]은 광도장과 샘플링 모듈 모두에 최신 하이브리드 표현 HashEncoding [17]을 사용하여 실제 환경에서 최상의 품질-속도 균형을 달성합니다. 무제한 장면 처리. 지금까지는 제한된 영역 [tn,tƒ] 내에서만 샘플링에 대해 설명했습니다. 무제한 장면의 경우 광선을 따라 밀집하게 샘플링하는 것은 불가능합니다. 그래픽 렌더링에 사용되는 밉맵과 유사하게, 일반적인 솔루션은 광선이 더 멀리 갈수록 더 거칠게 샘플링하는 것입니다.멀리 있는 객체가 이미지 평면에서 더 적은 픽셀로 나타나기 때문입니다.이는 단사 사상 함수 § : sЄ [Sn, Sƒ] → t € [tn, +∞]를 생성하고 t 공간 대신 s 공간에서 샘플링을 수행하여 달성할 수 있습니다.무한한 장면에서 작동하는 여러 논문[2, 39, 23]에서 다른 사상 함수를 소개했으며, 자세한 내용은 독자에게 문의하십시오.3.3. 토론 장단점.균일한 가정을 사용한 샘플링은 구현하기 가장 쉬운 방법이지만 대부분의 경우 효율성이 가장 낮습니다.공간적 건너뛰기는 대부분의 3D 공간이 비어 있기 때문에 더 효율적인 기술이지만, 최종 렌더링에 거의 기여하지 않는 점유되었지만 가려진 영역 내에서 여전히 균일하게 샘플링합니다(예: 그림 2(b)의 마지막 샘플). PDF 기반 추정기는 일반적으로 더 정확한 투과율 추정을 제공하여 샘플이 고기여 영역(예: 표면)에 더 집중되고 빈 영역과 가려진 영역 모두에 더 넓게 퍼질 수 있도록 합니다. 그러나 이는 또한 샘플이 그림 2(c)에 표시된 대로 건너뛰기 없이 항상 전체 공간에 퍼져 있음을 의미합니다. 게다가 현재 접근 방식은 모두 (1) 그림 2에 설명된 대로 광선을 따라 투과율을 추정하기 위한 조각별 선형성 가정[1, 2, 16, 35, 17] 또는 (2) 섹션 3.2에서 설명한 대로 투과율 추정기의 기본 폭셀 표현[35, 17]으로 인해 체적 렌더링에 앨리어싱 효과를 도입합니다. 최근 작업인 Zip-NeRF[3]는 이 두 가지 정확한 문제(작업에서 &quot;z-앨리어싱&quot; 및 &quot;xy-앨리어싱&quot;이라고 함)와 관련된 앨리어싱 문제를 해결하며, 이는 통합 프레임워크에서 자연스럽게 드러납니다. 구현의 어려움. 효율적 샘플링을 위한 현재의 구현은 모두 매우 높은 수준으로 사용자 정의되어 있으며 각 논문에서 제안한 특정 광도장과 긴밀하게 통합되어 있습니다. 예를 들어, 공간 스킵은 Instant-NGP [17] 및 Plenoxels [35]에서 사용자 정의 CUDA 커널로 구현됩니다. Mip-NeRF 360 [2], K-planes [7] 및 Nerfacto [29]에는 제안 네트워크가 구현되어 있지만 저장소와 긴밀하게 통합되어 있으며 스토리와 함께 제공되는 제한된 유형의 광도장만 지원할 수 있습니다. 그러나 앞서 보여준 것처럼 샘플링 프로세스는 광도장 표현과 독립적이므로 다양한 NeRF 변형으로 쉽게 전환할 수 있어야 합니다. 다양한 구현 세부 사항으로 인해 일반적으로 처음부터 효율적인 샘플링 접근 방식을 올바르게 구현하려면 상당한 노력이 필요합니다. 따라서 저장소 간에 쉽게 전환할 수 있는 구현이 있으면 NeRF에 대한 향후 연구를 지원하는 데 가치가 있을 것입니다. 통합 공식화의 통찰력. 투과율 추정기의 렌즈를 통해 샘플링 스펙트럼을 이해하면 새로운 샘플링 전략을 조사할 수 있는 길이 열립니다. 예를 들어, 저희 프레임워크는 Instant-NGP [17]의 Occupancy Grid와 Mip-NeRF 360 [2]의 Proposal Network가 상호 배타적이지 않고 보완적이라는 것을 보여줍니다. 둘 다 광선을 따라 투과율을 추정하는 것을 목표로 하기 때문입니다. 따라서 이 둘을 결합하는 것은 간단해집니다. 먼저 점유 그리드로 투과율을 계산한 다음 제안 네트워크로 추정된 투과율을 세부적으로 조정할 수 있습니다. 이렇게 하면 빈 공간을 건너뛰고 샘플을 표면에 집중시킬 수 있습니다. 저희는 섹션 4.4에서 이 접근 방식을 살펴보고 항상 전체 공간을 샘플링하는 제안 네트워크 접근 방식의 한계를 극복한다는 것을 보여줍니다. 더욱이 이 공식화는 깊이 정보나 다른 사전 확률을 사용하여 샘플링 절차를 개선하는 방법과 같은 질문에 대한 답을 얻을 수 있는 잠재력이 있으며, 독자들이 이에 대해 더 자세히 조사해 보시기 바랍니다. 4. NerfAcc 툴박스 이 논문에서는 신경 복사장 가속을 위해 설계된 NerfAcc 툴박스를 소개합니다. 이 툴박스는 체적 렌더링을 위한 효율적인 샘플링을 제공하며, 이는 보편적으로 적용 가능하고 다양한 복사장에 쉽게 통합할 수 있습니다[16, 4, 17, 14, 32]. 이 섹션에서는 먼저 이 툴박스의 설계 원칙과 중요한 구현 세부 사항을 소개합니다. 그 유연성을 보여주기 위해 기존 코드베이스를 약간만 수정하여 다양한 NeRF 관련 논문의 학습 속도를 1.5배에서 20배까지 크게 높일 수 있음을 추가로 보여줍니다. 4.1. 설계 원칙 • • 이 라이브러리는 다음과 같은 목표를 염두에 두고 설계되었습니다. • 플러그 앤 플레이. 저희의 주요 목표는 연구 커뮤니티를 위해 효율적인 체적 샘플링 기술을 구현하는 데 따르는 과제를 완화하는 것입니다. 따라서 NerfAcc는 Windows와 Linux 플랫폼 모두에서 PyPI에서 쉽게 설치할 수 있고 모든 PyTorch 코드베이스에 원활하게 통합할 수 있는 독립 실행형 라이브러리로 설계되었습니다. 효율성 및 유연성. 코드 속도를 극대화하기 위해 알고리즘 1: NerfAcc 렌더링 파이프라인으로 CUDA 커널에 연산을 융합합니다. NerfAcc에서 샘플은 투과율 추정기에서 생성되며, 이는 NeRF 학습 중에 업데이트할 수 있습니다. 자세한 내용은 섹션 4.2를 참조하세요. # nerf: 복사장 모델. #r_o: 광선 원점. (n_rays, 3) #r_d: 광선 정규화된 방향. (n_rays, 3) #eg, Prop Net, Occ Grid. estimator = nerfacc. 투과율 추정기() def density fn(to, t₁, r_id): &quot;&quot;&quot;nerf에서 밀도를 쿼리합니다.&quot;&quot;&quot; return nerf.density(r_o[r_id], r_d[r_id], to, t1) def rgb_density_fn(to, t₁, r_id): &quot;nerf에서 rgb와 밀도를 쿼리합니다.&quot;&quot;&quot; return nerf. forward (r_o [r_id], r_d[r_id], to, t₁) # 효율적인 샘플링. # (to, t1, r_id): 패킹된 샘플. (all_samples,) to, t₁, r_id = nerfacc.sampling( ) r_o, r_d, estimator, density_fn=density_fn # 미분 가능한 체적 렌더링. color, opacity, depth, aux = nerfacc.rendering( ) to, t₁, r_id, rgb_density_fn=rgb_density_fn # 투과율 추정기를 업데이트합니다. estimator.update_every_n_steps (to, t₁, r_id, aux) # nerf, r_o 및 r_d는 모두 그래디언트를 수신합니다. F.mse_loss (color, color_gt).backward() 메서드 TensoRF [4] + nerfacc (occ) 데이터 세트 속도 향상 T (분) ↓↓ PSNR ↑ LPIPS↓↓ 18.28.13 0.T&amp;T 1.5x 12.28.10 0.TensoRF [4] 10.32.52 0.Syn. 1.6x + nerface(occ) 6.32.51 0.NERF[16] &gt;1000 31.00 0.+ nerfacc(occ)† 동의어 20x 52.31.55 0.Instant-NGP[17] 4.32.+ nerfacc(occ)+ + nerfacc(prop)+ Instant-NGP[17] + nerfacc(occ)+ + nerfacc(prop)+ 동의어 1.0× 4.32.55 0.5.31.40 0.5.25.1.1x 5.26.41 0.4.27.0.(a) 정적 NeRF. 데이터세트 속도 향상 T(분) ↓ PSNR ↑ LPIPS ↓ 방법 TiNeu Vox [20] + nerfacc(occ) +nerfacc(prop) TiNeu Vox [5] + nerfacc(occ) 56.24.0.Hyper.1.7x 33.24.19 0.34.24.26 0.11.31.14 0.D-NeRF 2.8× 4.31.75 0.K-Planes [7] + nerfacc(occ) T-NeRF [21] + nerface(occ)+ 63.30.28 0.D-NeRF 1.6x 38.D-NeRF 20× 30.35 0.&gt;1000 28.78 0.58.0 32.22 0.(b) 동적 NeRF. 가능한 한 많이 제공하면서 사용자에게 유연한 Python API를 제공합니다.• Radiance Field Complexity. 정적 및 동적 장면 모두에 대해 밀도 기반 및 SDF 기반 필드를 포함하여 장면별 최적화를 위해 설계된 모든 Radiance Field를 지원하는 것을 목표로 합니다.4.2. 구현 세부 정보 Nerf Acc는 Instant-NGP의 Occupancy Grid[17]와 Mip-NeRF 360의 Proposal Network[2]라는 두 가지 고급 샘플링 방법을 Radiance Field 표현에서 분리할 수 있도록 통합합니다.알고리즘은 NerfAcc 도구 상자를 사용하여 체적 렌더링을 위한 의사 코드를 제공합니다.이 섹션에서는 기본적으로 원래 논문의 구현을 따르므로 각 알고리즘의 세부 사항을 다루지 않습니다.대신 이 도구 상자의 높은 효율성과 유연성을 유지하는 데 중요한 구현 설계에 대해 설명합니다.간격으로 샘플링. NerfAcc 도구 상자에서는 각 샘플을 좌표 x로 표현하는 대신 샘플을 광선(to, t₁, r)을 따라 간격으로 표현합니다. 여기서 to와 t₁는 r번째 광선을 따라 간격의 시작과 끝입니다. 이 간격 기반 표현은 세 가지 주요 이점을 제공합니다. 첫째, 샘플을 단일 지점 대신 간격으로 표현하면 Mip-NeRF[1] 및 MipNERF 360[2]과 같은 앤티앨리어싱을 위한 원뿔 기반 광선 기반 연구를 지원할 수 있습니다. 둘째, 거의 모든 경우에서 t¿가 방법 BARF[20] + nerface(occ) 데이터세트 속도 향상 T(분) ↓ PSNR ↑ LPIPS ↓ ER/ET↓ 합성 4.5x28.83 0.054 0.19 / 0.30.11 0.044 0.07 / 0.(c) 카메라 최적화를 위한 NeRF. 카메라 회전/국제적 오류는 ER/ET로 표시합니다.ET는 100으로 축척됩니다.표 2: 다양한 NeRF의 개선 사항.실험은 공식 저장소에서 필요한 코드를 대체하여 수행하지만, †로 표시된 코드는 + 재구현을 기반으로 합니다.그래디언트가 필요하지 않으며 간격을 나타내는 데 (x0,x1) 대신 (to, t₁, r)을 사용하면 샘플링 프로세스를 미분 가능한 계산 그래프에서 분리하여 속도를 극대화할 수 있습니다.마지막으로 각 샘플에 첨부된 광선 id r은 다음 단락에서 설명할 팩킹 텐서가 있는 광선에서 다양한 수의 샘플을 지원할 수 있습니다.다양한 광도장을 지원하기 위해 Nerfstudio[29]에서도 유사한 표현이 채택되었습니다.팩킹 텐서.공간적 건너뛰기로 샘플링을 지원하려면 각 광선이 다른 수의 유효 샘플을 생성할 수 있다는 점을 고려해야 합니다. 데이터를 (n_rays, n_samples, ...) 모양의 텐서로 저장하고 (n_rays, n_samples) 모양의 추가 마스크를 사용하여 어떤 샘플이 유효한지 나타내면 Nerf Acc Original 18.3min/28.13dB 5.3min/25.93dB |63.9min/30.28dB 56.3min/24.19dB |586min/28.83dB 12.6min/28.10dB |5.0min/27.21dB 38.8min/30.35dB 34.3min/24.26dB |130min/30.11dB TensoRF [4] Tanks&amp;Temples 데이터 세트 Instant-NGP [17] 360 데이터 세트 T-NeRF [16] D-NeRF 데이터 세트 TiNeu Vox [5] HyperNeRF 데이터 세트 BARF [14] NeRF-Synthetic 데이터 세트 그림 3: 정성적 결과. NerfAcc는 여러 데이터 세트에서 다양한 NeRF 관련 방법의 학습 시간을 크게 줄이는 동시에 대부분의 경우 품질을 약간 개선할 수 있습니다. 학습 시간과 테스트 PSNR은 각 이미지의 왼쪽 모서리에 표시됩니다. *** retum depth, def composites, apt, nay, rgb saples, deity, ples, des]: ray.length ray.neredie, kr)val rendering: quadrature) depth int delta density samples dist smples를 사용하여 확률을 계산합니다. NerfAccdef forward self, out, center, ray, apples, ade): tumerables, deity.s BARF의 코드 조각 *** sition torists startsM erf...rea fit.featers, Lands rey.indisl sitions trisirs rs (t.starts tents]/2.g, deity.in, gp,pacity, ther starts tr NerfAcc와 동일한 코드 그림 4: BARF [14] 저장소의 플러그 앤 플레이 예제. 약 50줄의 코드를 변경하면 NerfAcc에 장착된 효율적인 샘플링을 통해 학습 속도와 성능을 크게 향상시킬 수 있습니다(표 2b 참조). 많은 공간이 비어 있는 경우. 이를 해결하기 위해 Nerf Acc에서 샘플을 모양(모든 샘플, ...)의 &quot;패키지 텐서&quot;로 표현하고 유효한 샘플만 저장합니다(Algo. 1 참조). 각 샘플에 대한 연관된 레이를 추적하기 위해 다음을 호스팅합니다. 영어: 모양이 (n_rays, 2)인 정수 텐서로, 패킹된 텐서의 시작 인덱스와 이 레이의 샘플 수를 저장합니다. 이 접근 방식은 Instant-NGP [17] 및 PyTorch3D [22]에서 사용하는 방식과 유사합니다. 그래디언트 필터링 없음. 중요도 샘플링 후, 부정확한 투과율 추정으로 인해 일부 샘플이 빈 공간이나 가려진 공간에 있을 수 있으며, 특히 Occupancy Grid와 같은 공간 건너뛰기 방법에서 그렇습니다. 이러한 샘플은 그래디언트가 비활성화된 광도장을 사용하여 투과율을 평가하여 PyTorch의 미분 가능 계산 그래프에 포함되기 전에 필터링할 수 있습니다. 필터링하는 동안 역방향 패스가 필요하지 않으므로 모든 샘플을 계산 그래프에 보관하는 것보다 훨씬 빠릅니다(~10배). 실제로 투과율이 10-4 미만인 샘플은 렌더링 품질에 거의 영향을 미치지 않고 이 프로세스에서 무시됩니다. 이 전략은 Instant-NGP [17]의 구현에서 영감을 받았습니다. 4.3. 사례 연구 우리는 7개 논문을 통해 세 가지 유형의 NeRF에서 NerfAcc의 유연성을 보여줍니다.정적 NeRF(NeRF[16], TenSORF[4], Instant-NGP[17]); 동적 NeRF(D-NeRF[21], K-Planes[7] TiNeuVox[5]); 카메라 최적화를 위한 NeRF 변형(BARF[14]). Instant-NGP, TensoRF, TiNeuVox 및 K-Planes와 같은 이러한 방법 중 다수는 이미 효율성을 위해 고도로 최적화되었지만, 우리는 여전히 훈련을 큰 폭으로 가속화하고 거의 모든 사례에서 약간 더 나은 성능을 달성할 수 있습니다.TensoRF, TiNeu Vox, K-Planes 및 BARF를 사용한 실험은 약 100줄의 코드 변경으로 NerfAcc를 공식 코드베이스에 통합하여 수행된다는 점을 언급할 가치가 있습니다. 실험 결과는 베이스라인을 포함하여 표 2a, 2b 및 2c에 제시되어 있으며, 모두 [25]에 따라 비교를 용이하게 하기 위해 단일 NVIDIA RTX A5000 GPU를 사용하여 동일한 물리적 환경에서 수행되었습니다.이 논문에서 보고한 실험 외에도 NerfAcc는 밀도 기반 NeRF의 경우 nerfstudio [29], SDF 기반 NeRF의 경우 sdfstudio [38] 및 instant-nsr-pl [10]과 같은 몇 가지 인기 있는 오픈 소스 프로젝트에 통합되었습니다.정적 NeRFS.이 작업에서는 원래 MLP 기반 NeRF [16], TensoRF [4] 및 Instant-NGP [17]를 포함한 세 가지 NeRF 변형을 실험합니다. 우리는 NerfAcc가 경계가 있는(NeRF-Synthetic 데이터 세트[16], Tank&amp;Template 데이터 세트[12]) 장면과 경계가 없는(Dataset[2]) 장면 모두에서 MLP 기반 및 Voxel 기반 광도장에서 작동한다는 것을 보여줍니다. NerfAcc를 사용하면 순수한 Python 코드로 Instant-NGP 모델을 학습하고 표 2a에서 볼 수 있듯이 공식 순수 CUDA 구현보다 약간 더 나은 성능을 얻을 수 있습니다. 동적 NeRF. 이 작업에서 우리는 NerfAcc 도구 상자를 T-NeRF[21], K-Planes[7] 및 TiNeuVox[5]에 적용하여 합성(D-NeRF[21]) 캡처와 &quot;실제&quot; 캡처¹(HyperNeRF[20]와 함께 제공됨)를 모두 포괄합니다. 이러한 동적 방법을 가속화하기 위해 점유 그리드 접근 방식을 적용할 때 정적 장면을 표현하는 대신 모든 프레임에서 점유 그리드를 공유합니다. 즉, 단일 타임스탬프에서 영역의 불투명도를 나타내는 데 사용하는 대신 모든 타임스탬프에서 이 영역의 최대 불투명도를 나타내는 데 사용합니다.최적은 아니지만 이러한 데이터 세트에는 움직임이 제한되어 있기 때문에 렌더링을 매우 효율적으로 만듭니다.카메라 최적화를 위한 NeRF.이 작업에서 Nerf Acc 도구 상자를 사용하여 섭동 카메라가 있는 NeRFSynthetic 데이터 세트에서 BARF[14]를 수행했습니다.목표는 다중 뷰 이미지에 대한 광도 필드와 카메라 외부를 공동으로 최적화하는 것입니다.NerfAcc가 제공하는 공간 건너뛰기 샘플링이 더 빠른 학습을 용이하게 하고 이미지 품질과 카메라 포즈 재구성을 모두 크게 개선하는 것을 관찰했습니다.이러한 개선 사항은 샘플링 절차에서 강제된 희소성 때문일 수 있습니다.이 발견은 향후 연구에 흥미로운 방향을 제공할 수 있습니다.다양한 샘플링 접근 방식 분석.표 2a의 결과는 점유 그리드와 제안 네트워크 샘플링 간의 선택이 다양한 데이터 세트에서 런타임과 성능에 눈에 띄는 영향을 미칠 수 있음을 보여줍니다. 각 접근 방식은 서로 다른 하이퍼파라미터 집합에 의존하므로 하이퍼파라미터 공간을 휩쓸어 두 방법 간의 체계적인 비교가 중요합니다. 제안 네트워크 접근 방식에 대한 점유 그리드의 해상도와 행진 단계 크기와 제안 네트워크의 샘플 수와 크기를 변경했습니다. 그림 5에서 NeRF-Synthetic 및 Mip-NeRF 360 데이터 세트 모두에 대해 각 접근 방식에 대한 파레토 곡선을 그립니다. 이 분석은 점유 그리드 샘플링이 NeRF-Synthetic 데이터 세트에 적합한 반면 제안 네트워크 접근 방식이 데이터 세트에서 더 나은 성능을 발휘함을 나타냅니다. 이는 NeRF-Synthetic 데이터 세트 1이러한 데이터 세트는 카메라를 순간이동시키고 실제 캡처를 나타내지 않습니다[9]. 점유 그리드 접근 방식을 사용하여 효과적으로 건너뛸 수 있는 빈 공간이 더 많기 때문일 가능성이 높습니다. 그러나 실제 무한 데이터의 경우 점유 그리드 접근 방식의 사용은 경계 상자와 건너뛸 빈 공간의 부족으로 제한되므로 제안 네트워크 접근 방식이 더 효과적입니다. 이 실험에서는 동일한 학습 레시피를 사용하여 Instant-NGP[17]의 복사장을 사용했습니다.4.4 결합 샘플링 섹션 3에서 소개한 통합 투과율 추정기 개념의 이점은 두 가지 별개의 샘플링 접근 방식을 결합하는 것이 간단하다는 것입니다.두 가지 모두 본질적으로 중요도 샘플링에 사용할 수 있는 투과율 추정치를 제공하기 때문입니다.예를 들어, 제안 네트워크 위에 점유 그리드를 간단히 쌓으면 광선 수를 크게 줄이고 NeRF-Synthetic 데이터 세트에 있는 나머지 광선에 대한 근거리-원거리 평면을 줄일 수 있습니다.이를 통해 제안 네트워크만 중요도 샘플링에 사용할 때와 비교하여 품질이 31.40dB에서 32.35dB로 향상되고 학습 시간이 5.2분에서 4.3분으로 단축됩니다.그림 6은 결합 샘플링으로 플로터가 제거된 FICUS 장면의 예를 보여줍니다. 이 실험은 Instant-NGP [17]의 HashEncoding을 광도장 표현으로 사용하여 수행됩니다.
--- CONCLUSION ---
s 결론적으로, 이 논문은 고급 샘플링 접근 방식이 Neural Radiance Fields(NeRF) 최적화 및 렌더링의 효율성을 개선하는 데 미치는 상당한 영향을 강조합니다. 우리는 고급 샘플링이 고품질 결과를 유지하면서 다양한 최근 NeRF 논문의 학습 속도를 크게 높일 수 있음을 보여줍니다. 유연한 Python 도구 상자인 NerfAcc의 개발을 통해 연구자는 고급 샘플링 방법을 NeRF 관련 방법에 쉽게 통합할 수 있습니다. 고급 샘플링 방법에 대한 탐색 및 비교는 보다 효율적이고 접근 가능한 NeRF 기반 방법을 개발하기 위한 중요한 단계입니다. 제시된 결과는 또한 고급 샘플링 전략을 통해 NeRF 및 기타 관련 기술의 성능을 개선하기 위한 추가 연구의 잠재력을 보여줍니다. 감사의 말 이 프로젝트는 Bakar Fellows Program 및 BAIR/BDD 후원자의 지원을 받았습니다. 참고문헌 [1] Jonathan T Barron, Ben Mildenhall, Matthew Tancik, Peter Hedman, Ricardo Martin-Brualla 및 Pratul P Srinivasan. Mip-nerf: 앤티앨리어싱 신경망 PSNRPSNROccupancy Grid에 대한 다중 스케일 표현 * 제안 네트워크 PSNRT(분) FPS(a) NeRF-Synthetic 데이터 세트 PSNRT(분) FPS(b) Mip-NeRF 360 데이터 세트 그림 5: 학습 시간과 렌더링 FPS 측면에서 다양한 샘플링 방식 비교. 각 샘플링 방식에 대한 하이퍼 매개변수 공간을 청소하고, 점유 그리드 방식이 NeRF-Synthetic 데이터 세트에서 최상의 성능-속도 균형을 제공하는 반면 제안 네트워크 방식이 Mip-NeRF 360 데이터 세트에서 최상의 성능을 발휘한다는 것을 알아냈습니다. 참고 T(분)는 학습 시간을 나타내고 FPS는 초당 렌더링 프레임을 나타냅니다. 모든 실험은 Instant-NGP [17]의 HashEncoding을 광도장 표현으로 사용합니다. 우리가 탐구한 하이퍼 매개변수 공간에 대한 보충 자료를 참조하세요. 5.2분/31.40dB 제안 네트워크 4.3분/32.35dB 점유 그리드 + 제안 네트워크 렌더링된 RGB 렌더링된 불투명도 그림 6: NeRFSynthetic 데이터 세트에서 결합 샘플링의 결과. 투과율 추정기의 통합된 개념의 이점을 활용하면 두 가지 별개의 샘플링 접근 방식을 결합하는 것이 간단하다는 것을 알 수 있습니다. 광도장. IEEE/CVF 국제 컴퓨터 비전 컨퍼런스 회의록, 5855-5864쪽, 2021. [2] Jonathan T Barron, Ben Mildenhall, Dor Verbin, Pratul P Srinivasan, Peter Hedman. Mip-nerf 360: 무제한 앤티 앨리어싱 신경 광도장. IEEE/CVF 컴퓨터 비전 및 패턴 인식 컨퍼런스 회의록, 5470-5479페이지, 2022. [3] Jonathan T. Barron, Ben Mildenhall, Dor Verbin, Pratul P. Srinivasan, Peter Hedman. Zip-nerf: 앤티 앨리어싱 그리드 기반 신경 광도 필드. arXiv, 2023. [4] Anpei Chen, Zexiang Xu, Andreas Geiger, Jingyi Yu, Hao Su. Tensorf: 텐서 광도 필드. arXiv 사전 인쇄본 arXiv:2203.09517, 2022. [5] Jiemin Fang, Taoran Yi, Xinggang Wang, Lingxi Xie, Xiaopeng Zhang, Wenyu Liu, Matthias Nießner, Qi Tian. 시간 인식 신경 폭셀을 사용한 빠른 동적 광도 필드. SIGGRAPH Asia 2022 Conference Papers, 2022. [6] Julian Fong, Magnus Wrenninge, Christopher Kulla 및 Ralf Habel. 프로덕션 볼륨 렌더링: Siggraph 2017 과정. ACM SIGGRAPH 2017 과정, 1-79페이지. 2017. [7] Sara Fridovich-Keil, Giacomo Meanti, Frederik Warburg, Benjamin Recht 및 Angjoo Kanazawa. K-평면: 공간, 시간 및 모양의 명시적 광도장. arXiv 사전 인쇄본 arXiv:2301.10241, 2023. [8] Clement Fuji Tsang, Maria Shugrina, Jean Francois Lafleche, Towaki Takikawa, Jiehan Wang, Charles Loop, Wenzheng Chen, Krishna Murthy Jatavallabhula, Edward Smith, Artem Rozantsev, Or Perel, Tianchang Shen, Jun Gao, Sanja Fidler, Gavriel State, Jason Gorski, Tommy Xiang, Jianing Li, Michael Li, Rev Lebaredian. Kaolin: 3D 딥 러닝 연구를 가속화하기 위한 PyTorch 라이브러리. https://github.com/NVIDIAGameWorks/kaolin, 2022. [9] Hang Gao, Ruilong Li, Shubham Tulsiani, Bryan Russell, Angjoo Kanazawa. 단안 동적 뷰 합성: 현실 확인. 신경 정보 처리 시스템의 발전, 2022. [10] Yuan-Chen Guo. 즉각적인 신경 표면 재구성, 2022. [11] Yoonwoo Jeong, Seungjoo Shin, Kibaek Park. Nerffactory: 멋진 파이토치 너프 컬렉션, 2022. [12] Arno Knapitsch, Jaesik Park, Qian-Yi Zhou, Vladlen Koltun. 탱크와 사원: 대규모 장면 재구성 벤치마킹. ACM 그래픽스 저널, 36(4), 2017. [13] Ruilong Li, Julian Tanke, Minh Vo, Michael Zollhofer, Jurgen Gall, Angjoo Kanazawa, Christoph Lassner. Tava: 템플릿 없는 애니메이션 가능한 체적 액터. arXiv 사전 인쇄본 arXiv:2206.08929, 2022. [14] Chen-Hsuan Lin, Wei-Chiu Ma, Antonio Torralba, Simon Lucey. Barf: 번들 조정 신경 광도장. IEEE 국제 컴퓨터 비전 컨퍼런스(ICCV), 2021. [15] Ricardo Martin-Brualla, Noha Radwan, Mehdi SM Sajjadi, Jonathan T Barron, Alexey Dosovitskiy, Daniel Duckworth. 야생에서의 Nerf: 제약 없는 사진 컬렉션을 위한 신경 광도장. IEEE/CVF 컴퓨터 비전 및 패턴 인식 컨퍼런스 회의록, 7210-7219페이지, 2021. [16] Ben Mildenhall, Pratul P Srinivasan, Matthew Tancik, Jonathan T Barron, Ravi Ramamoorthi, Ren Ng. Nerf: 뷰 합성을 위한 신경 광도장으로 장면 표현. ACM 커뮤니케이션, 65(1):99–106, 2021. [17] Thomas Müller, Alex Evans, Christoph Schied, Alexander Keller. 다중 해상도 해시 인코딩을 사용한 인스턴트 신경 그래픽 원시. arXiv 사전 인쇄본 arXiv:2201.05989, 2022. [18] Michael Oechsle, Songyou Peng, Andreas Geiger. Unisurf: 다중 뷰 재구성을 위한 신경 암묵적 표면과 광도장 통합. IEEE/CVF 컴퓨터 비전 국제 컨퍼런스 회의록, 5589-5599페이지, 2021. [19] Keunhong Park, Utkarsh Sinha, Jonathan T Barron, Sofien Bouaziz, Dan B Goldman, Steven M Seitz, Ricardo Martin-Brualla. Nerfies: 변형 가능한 신경 광도장. IEEE/CVF 국제 컴퓨터 비전 컨퍼런스 회의록, 5865-5874페이지, 2021. [20] Keunhong Park, Utkarsh Sinha, Peter Hedman, Jonathan T Barron, Sofien Bouaziz, Dan B Goldman, Ricardo MartinBrualla, Steven M Seitz. Hypernerf: 위상적으로 변하는 신경 광도장에 대한 고차원 표현. arXiv 사전 인쇄본 arXiv:2106.13228, 2021. [21] Albert Pumarola, Enric Corona, Gerard Pons-Moll, Francesc Moreno-Noguer. D-nerf: 동적 장면을 위한 신경 광도장. IEEE/CVF 컴퓨터 비전 및 패턴 인식 컨퍼런스 회의록, 10318-10327페이지, 2021. [22] Nikhila Ravi, Jeremy Reizenstein, David Novotny, Taylor Gordon, Wan-Yen Lo, Justin Johnson, Georgia Gkioxari. pytorch3d를 사용한 3D 딥 러닝 가속화. arXiv 사전 인쇄본 arXiv:2007.08501, 2020. [23] Christian Reiser, Richard Szeliski, Dor Verbin, Pratul P Srinivasan, Ben Mildenhall, Andreas Geiger, Jonathan T Barron, Peter Hedman. Merf: 무제한 장면에서 실시간 뷰 합성을 위한 메모리 효율적인 광도 필드. arXiv 사전 인쇄본 arXiv:2302.12249, 2023. [24] Cheng Sun, Min Sun 및 Hwann-Tzong Chen. 직접 복셀 그리드 최적화: 광도장 재구성을 위한 초고속 수렴. IEEE/CVF 컴퓨터 비전 및 패턴 인식 컨퍼런스 회의록, 5459-5469페이지, 2022. [25] Cheng Sun, Min Sun 및 Hwann-Tzong Chen. 광도장 재구성을 위한 개선된 직접 복셀 그리드 최적화. arXiv 사전 인쇄본 arXiv:2206.05085, 2022. [26] Towaki Takikawa, Alex Evans, Jonathan Tremblay, Thomas Müller, Morgan McGuire, Alec Jacobson 및 Sanja Fidler. 가변 비트레이트 신경장. ACM SIGGRAPHConference Proceedings, 1-9페이지, 2022. [27] Towaki Takikawa, Joey Litalien, Kangxue Yin, Karsten Kreis, Charles Loop, Derek Nowrouzezahrai, Alec Jacobson, Morgan McGuire, Sanja Fidler. 신경 기하학적 세부 수준: 암묵적 3D 모양을 사용한 실시간 렌더링. IEEE/CVF 컴퓨터 비전 및 패턴 인식 컨퍼런스 회의록, 11358-11367페이지, 2021. [28] Towaki Takikawa, Or Perel, Clement Fuji Tsang, Charles Loop, Joey Litalien, Jonathan Tremblay, Sanja Fidler, Maria Shugrina. Kaolin wisp: 신경 분야 연구를 위한 파이토치 라이브러리 및 엔진. https://github.com/ NVIDIAGameWorks/kaolin-wisp, 2022. [29] Matthew Tancik, Ethan Weber, Evonne Ng, Ruilong Li, Brent Yi, Justin Kerr, Terrance Wang, Alexander Kristoffersen, Jake Austin, Kamyar Salahi, et al. Nerfstudio: 신경 광도장 개발을 위한 모듈식 프레임워크. arXiv 사전 인쇄본 arXiv:2302.04264, 2023. [30] Dor Verbin, Peter Hedman, Ben Mildenhall, Todd Zickler, Jonathan T Barron, Pratul P Srinivasan. Ref-nerf: 신경 광도장에 대한 구조화된 뷰 종속 모양. 2022년 IEEE/CVF 컴퓨터 비전 및 패턴 인식(CVPR) 컨퍼런스, 5481-5490페이지. IEEE, 2022. [31] John Von Neumann. 13. 무작위 숫자와 관련하여 사용되는 다양한 기술.Appl.Math Ser, 12(36-38):3, 1951. [32] Peng Wang, Lingjie Liu, Yuan Liu, Christian Theobalt, Taku Komura 및 Wenping Wang. Neus: 다중 뷰 재구성을 위한 볼륨 렌더링을 통한 신경 암시적 표면 학습.arXiv 사전 인쇄본 arXiv:2106.10689, 2021. [33] Zirui Wang, Shangzhe Wu, Weidi Xie, Min Chen 및 Victor Adrian Prisacariu. Nerf-: 알려진 카메라 매개변수가 없는 신경 광도장.arXiv 사전 인쇄본 arXiv:2102.07064, 2021. [34] Lior Yariv, Jiatao Gu, Yoni Kasten 및 Yaron Lipman. 신경 암시적 표면의 볼륨 렌더링. 신경 정보 처리 시스템의 발전, 34:4805-4815, 2021. [35] Alex Yu, Sara Fridovich-Keil, Matthew Tancik, Qinhong Chen, Benjamin Recht, Angjoo Kanazawa. Plenoxels: 신경망이 없는 광도장. arXiv 사전 인쇄본 arXiv:2112.05131, 2021. [36] Alex Yu, Ruilong Li, Matthew Tancik, Hao Li, Ren Ng, Angjoo Kanazawa. 신경 광도장의 실시간 렌더링을 위한 Plenoctrees. IEEE/CVF 컴퓨터 비전 국제 컨퍼런스 회의록, 5752-5761페이지, 2021. [37] Alex Yu, Vickie Ye, Matthew Tancik, Angjoo Kanazawa. pixelnerf: 하나 또는 몇 개의 이미지에서 얻은 신경 광도장. IEEE/CVF 컴퓨터 비전 및 패턴 인식 컨퍼런스 논문집, 4578-4587페이지, 2021. [38] Zehao Yu, Anpei Chen, Bozidar Antic, Songyou Peng Peng, Apratim Bhattacharyya, Michael Niemeyer, Siyu Tang, Torsten Sattler, Andreas Geiger. Sdfstudio: 표면 재구성을 위한 통합 프레임워크, 2022. [39] Kai Zhang, Gernot Riegler, Noah Snavely, Vladlen Koltun. Nerf++: 신경 광도장 분석 및 개선. arXiv 사전 인쇄본 arXiv:2010.07492, 2020. A. 사례 연구에 대한 구현 세부 정보 이 섹션에서는 본 논문의 섹션 4.3에서 설명한 대로 여러 NeRF를 향상시키기 위해 NerfAcc를 사용하는 방법을 설명합니다. 우리는 Nerf Acc를 다양한 NeRF 모델에 적용하는 방법에 대한 자세한 정보를 제공합니다.A.1. 정적 NeRF.바닐라 NeRF[16].우리는 바닐라 NeRF 논문과 동일한 구조의 8층 MLP를 훈련했습니다.이 논문은 코스-투-파인 샘플링(64+128)을 위해 두 개의 MLP를 사용하는 PDF 기반 효율적 샘플링 접근 방식을 사용합니다.PDF 기반 접근 방식은 표면 주변에 샘플을 효과적으로 집중시키지만 MLP 자체는 계산적으로 느립니다.프로세스를 가속화하기 위해 NerfAcc에서 제공하는 Occupancy Grid를 사용하는 공간 건너뛰기 접근 방식을 사용했습니다.NeRF-Synthetic 데이터 세트에 상당한 양의 빈 공간이 있기 때문에 메모리 문제 없이 레이당 샘플 수를 1024개로 늘릴 수 있습니다.결과적으로 20배의 속도 향상과 +0.5dB의 이미지 품질 개선을 달성했습니다.TensoRF[4]. 흥미롭게도 NerfAcc를 자체 저장소에 통합하면 NeRF-Synthetic과 Tank-and-Temple 데이터 세트 모두에서 최신의 복셀 기반 방법인 TensoRF[4]의 속도가 1.5배 향상됩니다. 이러한 개선은 투과율 추정기에 대한 업데이트 때문이라고 추측합니다. 논문에서 논의되지는 않았지만 TensoRF는 샘플링 시 처음에 점유 그리드와 유사한 스킵 기반 투과율 추정기를 사용합니다. 그러나 구현과 달리 TensoRF의 추정기는 주요 밀도장의 정확한 추정을 유지하지 않고 전체 학습 프로세스에서 두 번만 업데이트합니다. 반면, 우리의 접근 방식은 몇 학습 단계마다 밀도장의 실행 평균을 추출합니다. Instant-NGP[17]. 나아가 Occupancy Grid를 사용하여 동일한 학습 속도와 약간 더 나은 성능(+0.2dB)으로 NeRF-Synthetic 데이터 세트에서 Instant-NGP[17]를 재현할 수 있었습니다. 우리는 또한 제안 네트워크 접근 방식을 사용하여 Mip-NeRF 360 데이터 세트에서 상당히 더 나은 결과를 얻었습니다. 원래 Instant-NGP 구현은 모든 작업이 CUDA 커널에 융합된 순수 CUDA라는 점에 주목할 가치가 있습니다. NerfAcc가 기본 샘플링 논리를 처리하면 전체 학습 파이프라인을 PyTorch 기반의 Python으로 구현할 수 있습니다. 우리는 우리의 툴박스가 고성능 컴퓨팅과 단순성 간의 균형을 이루어 신속한 연구 개발에 도움이 된다고 믿습니다. A.2. 동적 NeRF. T-NeRF [21] 우리는 D-NeRF 논문 [21]에 설명된 T-NeRF 모델을 D-NeRF 데이터 세트에서 학습했습니다. NerfAcc의 점유 그리드를 활용하여 성능이 +3.5dB 향상되면서 20배의 놀라운 속도 향상을 달성했습니다. T-NeRF 모델과 학습 레시피를 다시 구현하여 이 실험을 수행했다는 점에 주목할 가치가 있습니다. K-Planes [7]. K-Planes의 경우 원래 제안 기반 투과율 추정기를 점유 그리드로 대체하여 D-NeRF 데이터 세트에서 약 1.6배의 속도 향상을 달성했습니다. D-NeRF 데이터 세트의 희소성으로 인해 공간 건너뛰기 접근 방식에 더 적합하다고 생각합니다. TiNeu Vox [5]. 두 데이터 세트 모두에서 TiNeu Vox를 사용한 실험은 툴박스를 사용하여 보편적으로 속도를 높일 수 있음을 시사합니다. 구체적으로 NerfAcc는 D-NeRF에서 2.8배, HyperNeRF 데이터 세트에서 1.7배로 학습 속도를 높입니다. 원래 TiNeuVox 구현은 DVGO [24]를 확장하여 주 밀도 그리드 내에서 광선을 직접 이동시키는데, 공간 건너뛰기에는 정밀한 기하학이 필요하지 않기 때문에 낭비일 수 있습니다. 우리의 점유 그리드는 이 문제를 극복하고 더 효과적인 것으로 나타났습니다. 또한, 시간 조건화된 제안 네트워크가 HyperNeRF 데이터 세트의 실제 경계 장면에서 유사한 성능을 달성할 수 있음을 발견했는데, 이는 제안 네트워크를 사용한 Instant-NGP 실험에서 관찰한 것과 일치합니다.A.3. 카메라 최적화.범위 BARF[14]. 원래 구현에서 BARF는 바닐라 NeRF[16]의 코스 수준과 유사하게 각 광선에 대해 근거리-원거리 내에서 균일하게 샘플링합니다. 공간 건너뛰기를 위해 도구 상자에서 점유 그리드를 통합하여 학습 중에 4배 속도가 향상되었습니다. 또한 이로 인해 이미지 품질이 향상(+1.3dB)되었고 카메라 등록 오류가 약 2배 낮아졌습니다.B. 하이퍼 매개변수 공간 본 논문의 그림 5는 각 샘플링 접근 방식의 성능에 하이퍼 매개변수가 상당한 영향을 미친다는 것을 보여줍니다.점유 그리드 접근 방식은 이진 임계값 7, 그리드 해상도 L³, 행진 단계 크기 At와 같은 몇 가지 기본 하이퍼 매개변수에 의존합니다. 한편, 제안 네트워크 접근 방식은 제안 네트워크 Fe의 설정과 관련된 하이퍼 파라미터와 각 레이를 따라 수집할 샘플 수 N을 포함합니다. 실험의 견고성을 보장하기 위해 그림 5의 각 데이터 포인트는 각 데이터 세트에 대한 합리적인 범위에서 추출한 하이퍼 파라미터의 무작위 조합으로 학습합니다.
